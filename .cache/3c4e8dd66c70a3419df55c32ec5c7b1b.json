{"dependencies":[{"name":"C:\\Users\\kea_h\\vrandblog\\package.json","includedInParent":true,"mtime":1521988836233},{"name":"C:\\Users\\kea_h\\vrandblog\\.babelrc","includedInParent":true,"mtime":1521988825970},{"name":"C:\\Users\\kea_h\\vrandblog\\node_modules\\verror\\package.json","includedInParent":true,"mtime":1521988835805},{"name":"assert-plus","loc":{"line":5,"column":29}},{"name":"util","loc":{"line":6,"column":23}},{"name":"extsprintf","loc":{"line":8,"column":29}},{"name":"core-util-is","loc":{"line":9,"column":26}}],"generated":{"js":"/*\r\n * verror.js: richer JavaScript errors\r\n */\r\n\r\nvar mod_assertplus = require('assert-plus');\r\nvar mod_util = require('util');\r\n\r\nvar mod_extsprintf = require('extsprintf');\r\nvar mod_isError = require('core-util-is').isError;\r\nvar sprintf = mod_extsprintf.sprintf;\r\n\r\n/*\r\n * Public interface\r\n */\r\n\r\n/* So you can 'var VError = require('verror')' */\r\nmodule.exports = VError;\r\n/* For compatibility */\r\nVError.VError = VError;\r\n/* Other exported classes */\r\nVError.SError = SError;\r\nVError.WError = WError;\r\nVError.MultiError = MultiError;\r\n\r\n/*\r\n * Common function used to parse constructor arguments for VError, WError, and\r\n * SError.  Named arguments to this function:\r\n *\r\n *     strict\t\tforce strict interpretation of sprintf arguments, even\r\n *     \t\t\tif the options in \"argv\" don't say so\r\n *\r\n *     argv\t\terror's constructor arguments, which are to be\r\n *     \t\t\tinterpreted as described in README.md.  For quick\r\n *     \t\t\treference, \"argv\" has one of the following forms:\r\n *\r\n *          [ sprintf_args... ]           (argv[0] is a string)\r\n *          [ cause, sprintf_args... ]    (argv[0] is an Error)\r\n *          [ options, sprintf_args... ]  (argv[0] is an object)\r\n *\r\n * This function normalizes these forms, producing an object with the following\r\n * properties:\r\n *\r\n *    options           equivalent to \"options\" in third form.  This will never\r\n *    \t\t\tbe a direct reference to what the caller passed in\r\n *    \t\t\t(i.e., it may be a shallow copy), so it can be freely\r\n *    \t\t\tmodified.\r\n *\r\n *    shortmessage      result of sprintf(sprintf_args), taking options.strict\r\n *    \t\t\tinto account as described in README.md.\r\n */\r\nfunction parseConstructorArguments(args)\r\n{\r\n\tvar argv, options, sprintf_args, shortmessage, k;\r\n\r\n\tmod_assertplus.object(args, 'args');\r\n\tmod_assertplus.bool(args.strict, 'args.strict');\r\n\tmod_assertplus.array(args.argv, 'args.argv');\r\n\targv = args.argv;\r\n\r\n\t/*\r\n\t * First, figure out which form of invocation we've been given.\r\n\t */\r\n\tif (argv.length === 0) {\r\n\t\toptions = {};\r\n\t\tsprintf_args = [];\r\n\t} else if (mod_isError(argv[0])) {\r\n\t\toptions = { 'cause': argv[0] };\r\n\t\tsprintf_args = argv.slice(1);\r\n\t} else if (typeof (argv[0]) === 'object') {\r\n\t\toptions = {};\r\n\t\tfor (k in argv[0]) {\r\n\t\t\toptions[k] = argv[0][k];\r\n\t\t}\r\n\t\tsprintf_args = argv.slice(1);\r\n\t} else {\r\n\t\tmod_assertplus.string(argv[0],\r\n\t\t    'first argument to VError, SError, or WError ' +\r\n\t\t    'constructor must be a string, object, or Error');\r\n\t\toptions = {};\r\n\t\tsprintf_args = argv;\r\n\t}\r\n\r\n\t/*\r\n\t * Now construct the error's message.\r\n\t *\r\n\t * extsprintf (which we invoke here with our caller's arguments in order\r\n\t * to construct this Error's message) is strict in its interpretation of\r\n\t * values to be processed by the \"%s\" specifier.  The value passed to\r\n\t * extsprintf must actually be a string or something convertible to a\r\n\t * String using .toString().  Passing other values (notably \"null\" and\r\n\t * \"undefined\") is considered a programmer error.  The assumption is\r\n\t * that if you actually want to print the string \"null\" or \"undefined\",\r\n\t * then that's easy to do that when you're calling extsprintf; on the\r\n\t * other hand, if you did NOT want that (i.e., there's actually a bug\r\n\t * where the program assumes some variable is non-null and tries to\r\n\t * print it, which might happen when constructing a packet or file in\r\n\t * some specific format), then it's better to stop immediately than\r\n\t * produce bogus output.\r\n\t *\r\n\t * However, sometimes the bug is only in the code calling VError, and a\r\n\t * programmer might prefer to have the error message contain \"null\" or\r\n\t * \"undefined\" rather than have the bug in the error path crash the\r\n\t * program (making the first bug harder to identify).  For that reason,\r\n\t * by default VError converts \"null\" or \"undefined\" arguments to their\r\n\t * string representations and passes those to extsprintf.  Programmers\r\n\t * desiring the strict behavior can use the SError class or pass the\r\n\t * \"strict\" option to the VError constructor.\r\n\t */\r\n\tmod_assertplus.object(options);\r\n\tif (!options.strict && !args.strict) {\r\n\t\tsprintf_args = sprintf_args.map(function (a) {\r\n\t\t\treturn (a === null ? 'null' :\r\n\t\t\t    a === undefined ? 'undefined' : a);\r\n\t\t});\r\n\t}\r\n\r\n\tif (sprintf_args.length === 0) {\r\n\t\tshortmessage = '';\r\n\t} else {\r\n\t\tshortmessage = sprintf.apply(null, sprintf_args);\r\n\t}\r\n\r\n\treturn ({\r\n\t    'options': options,\r\n\t    'shortmessage': shortmessage\r\n\t});\r\n}\r\n\r\n/*\r\n * See README.md for reference documentation.\r\n */\r\nfunction VError()\r\n{\r\n\tvar args, obj, parsed, cause, ctor, message, k;\r\n\r\n\targs = Array.prototype.slice.call(arguments, 0);\r\n\r\n\t/*\r\n\t * This is a regrettable pattern, but JavaScript's built-in Error class\r\n\t * is defined to work this way, so we allow the constructor to be called\r\n\t * without \"new\".\r\n\t */\r\n\tif (!(this instanceof VError)) {\r\n\t\tobj = Object.create(VError.prototype);\r\n\t\tVError.apply(obj, arguments);\r\n\t\treturn (obj);\r\n\t}\r\n\r\n\t/*\r\n\t * For convenience and backwards compatibility, we support several\r\n\t * different calling forms.  Normalize them here.\r\n\t */\r\n\tparsed = parseConstructorArguments({\r\n\t    'argv': args,\r\n\t    'strict': false\r\n\t});\r\n\r\n\t/*\r\n\t * If we've been given a name, apply it now.\r\n\t */\r\n\tif (parsed.options.name) {\r\n\t\tmod_assertplus.string(parsed.options.name,\r\n\t\t    'error\\'s \"name\" must be a string');\r\n\t\tthis.name = parsed.options.name;\r\n\t}\r\n\r\n\t/*\r\n\t * For debugging, we keep track of the original short message (attached\r\n\t * this Error particularly) separately from the complete message (which\r\n\t * includes the messages of our cause chain).\r\n\t */\r\n\tthis.jse_shortmsg = parsed.shortmessage;\r\n\tmessage = parsed.shortmessage;\r\n\r\n\t/*\r\n\t * If we've been given a cause, record a reference to it and update our\r\n\t * message appropriately.\r\n\t */\r\n\tcause = parsed.options.cause;\r\n\tif (cause) {\r\n\t\tmod_assertplus.ok(mod_isError(cause), 'cause is not an Error');\r\n\t\tthis.jse_cause = cause;\r\n\r\n\t\tif (!parsed.options.skipCauseMessage) {\r\n\t\t\tmessage += ': ' + cause.message;\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n\t * If we've been given an object with properties, shallow-copy that\r\n\t * here.  We don't want to use a deep copy in case there are non-plain\r\n\t * objects here, but we don't want to use the original object in case\r\n\t * the caller modifies it later.\r\n\t */\r\n\tthis.jse_info = {};\r\n\tif (parsed.options.info) {\r\n\t\tfor (k in parsed.options.info) {\r\n\t\t\tthis.jse_info[k] = parsed.options.info[k];\r\n\t\t}\r\n\t}\r\n\r\n\tthis.message = message;\r\n\tError.call(this, message);\r\n\r\n\tif (Error.captureStackTrace) {\r\n\t\tctor = parsed.options.constructorOpt || this.constructor;\r\n\t\tError.captureStackTrace(this, ctor);\r\n\t}\r\n\r\n\treturn (this);\r\n}\r\n\r\nmod_util.inherits(VError, Error);\r\nVError.prototype.name = 'VError';\r\n\r\nVError.prototype.toString = function ve_toString()\r\n{\r\n\tvar str = (this.hasOwnProperty('name') && this.name ||\r\n\t\tthis.constructor.name || this.constructor.prototype.name);\r\n\tif (this.message)\r\n\t\tstr += ': ' + this.message;\r\n\r\n\treturn (str);\r\n};\r\n\r\n/*\r\n * This method is provided for compatibility.  New callers should use\r\n * VError.cause() instead.  That method also uses the saner `null` return value\r\n * when there is no cause.\r\n */\r\nVError.prototype.cause = function ve_cause()\r\n{\r\n\tvar cause = VError.cause(this);\r\n\treturn (cause === null ? undefined : cause);\r\n};\r\n\r\n/*\r\n * Static methods\r\n *\r\n * These class-level methods are provided so that callers can use them on\r\n * instances of Errors that are not VErrors.  New interfaces should be provided\r\n * only using static methods to eliminate the class of programming mistake where\r\n * people fail to check whether the Error object has the corresponding methods.\r\n */\r\n\r\nVError.cause = function (err)\r\n{\r\n\tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\r\n\treturn (mod_isError(err.jse_cause) ? err.jse_cause : null);\r\n};\r\n\r\nVError.info = function (err)\r\n{\r\n\tvar rv, cause, k;\r\n\r\n\tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\r\n\tcause = VError.cause(err);\r\n\tif (cause !== null) {\r\n\t\trv = VError.info(cause);\r\n\t} else {\r\n\t\trv = {};\r\n\t}\r\n\r\n\tif (typeof (err.jse_info) == 'object' && err.jse_info !== null) {\r\n\t\tfor (k in err.jse_info) {\r\n\t\t\trv[k] = err.jse_info[k];\r\n\t\t}\r\n\t}\r\n\r\n\treturn (rv);\r\n};\r\n\r\nVError.findCauseByName = function (err, name)\r\n{\r\n\tvar cause;\r\n\r\n\tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\r\n\tmod_assertplus.string(name, 'name');\r\n\tmod_assertplus.ok(name.length > 0, 'name cannot be empty');\r\n\r\n\tfor (cause = err; cause !== null; cause = VError.cause(cause)) {\r\n\t\tmod_assertplus.ok(mod_isError(cause));\r\n\t\tif (cause.name == name) {\r\n\t\t\treturn (cause);\r\n\t\t}\r\n\t}\r\n\r\n\treturn (null);\r\n};\r\n\r\nVError.hasCauseWithName = function (err, name)\r\n{\r\n\treturn (VError.findCauseByName(err, name) !== null);\r\n};\r\n\r\nVError.fullStack = function (err)\r\n{\r\n\tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\r\n\r\n\tvar cause = VError.cause(err);\r\n\r\n\tif (cause) {\r\n\t\treturn (err.stack + '\\ncaused by: ' + VError.fullStack(cause));\r\n\t}\r\n\r\n\treturn (err.stack);\r\n};\r\n\r\nVError.errorFromList = function (errors)\r\n{\r\n\tmod_assertplus.arrayOfObject(errors, 'errors');\r\n\r\n\tif (errors.length === 0) {\r\n\t\treturn (null);\r\n\t}\r\n\r\n\terrors.forEach(function (e) {\r\n\t\tmod_assertplus.ok(mod_isError(e));\r\n\t});\r\n\r\n\tif (errors.length == 1) {\r\n\t\treturn (errors[0]);\r\n\t}\r\n\r\n\treturn (new MultiError(errors));\r\n};\r\n\r\nVError.errorForEach = function (err, func)\r\n{\r\n\tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\r\n\tmod_assertplus.func(func, 'func');\r\n\r\n\tif (err instanceof MultiError) {\r\n\t\terr.errors().forEach(function iterError(e) { func(e); });\r\n\t} else {\r\n\t\tfunc(err);\r\n\t}\r\n};\r\n\r\n\r\n/*\r\n * SError is like VError, but stricter about types.  You cannot pass \"null\" or\r\n * \"undefined\" as string arguments to the formatter.\r\n */\r\nfunction SError()\r\n{\r\n\tvar args, obj, parsed, options;\r\n\r\n\targs = Array.prototype.slice.call(arguments, 0);\r\n\tif (!(this instanceof SError)) {\r\n\t\tobj = Object.create(SError.prototype);\r\n\t\tSError.apply(obj, arguments);\r\n\t\treturn (obj);\r\n\t}\r\n\r\n\tparsed = parseConstructorArguments({\r\n\t    'argv': args,\r\n\t    'strict': true\r\n\t});\r\n\r\n\toptions = parsed.options;\r\n\tVError.call(this, options, '%s', parsed.shortmessage);\r\n\r\n\treturn (this);\r\n}\r\n\r\n/*\r\n * We don't bother setting SError.prototype.name because once constructed,\r\n * SErrors are just like VErrors.\r\n */\r\nmod_util.inherits(SError, VError);\r\n\r\n\r\n/*\r\n * Represents a collection of errors for the purpose of consumers that generally\r\n * only deal with one error.  Callers can extract the individual errors\r\n * contained in this object, but may also just treat it as a normal single\r\n * error, in which case a summary message will be printed.\r\n */\r\nfunction MultiError(errors)\r\n{\r\n\tmod_assertplus.array(errors, 'list of errors');\r\n\tmod_assertplus.ok(errors.length > 0, 'must be at least one error');\r\n\tthis.ase_errors = errors;\r\n\r\n\tVError.call(this, {\r\n\t    'cause': errors[0]\r\n\t}, 'first of %d error%s', errors.length, errors.length == 1 ? '' : 's');\r\n}\r\n\r\nmod_util.inherits(MultiError, VError);\r\nMultiError.prototype.name = 'MultiError';\r\n\r\nMultiError.prototype.errors = function me_errors()\r\n{\r\n\treturn (this.ase_errors.slice(0));\r\n};\r\n\r\n\r\n/*\r\n * See README.md for reference details.\r\n */\r\nfunction WError()\r\n{\r\n\tvar args, obj, parsed, options;\r\n\r\n\targs = Array.prototype.slice.call(arguments, 0);\r\n\tif (!(this instanceof WError)) {\r\n\t\tobj = Object.create(WError.prototype);\r\n\t\tWError.apply(obj, args);\r\n\t\treturn (obj);\r\n\t}\r\n\r\n\tparsed = parseConstructorArguments({\r\n\t    'argv': args,\r\n\t    'strict': false\r\n\t});\r\n\r\n\toptions = parsed.options;\r\n\toptions['skipCauseMessage'] = true;\r\n\tVError.call(this, options, '%s', parsed.shortmessage);\r\n\r\n\treturn (this);\r\n}\r\n\r\nmod_util.inherits(WError, VError);\r\nWError.prototype.name = 'WError';\r\n\r\nWError.prototype.toString = function we_toString()\r\n{\r\n\tvar str = (this.hasOwnProperty('name') && this.name ||\r\n\t\tthis.constructor.name || this.constructor.prototype.name);\r\n\tif (this.message)\r\n\t\tstr += ': ' + this.message;\r\n\tif (this.jse_cause && this.jse_cause.message)\r\n\t\tstr += '; caused by ' + this.jse_cause.toString();\r\n\r\n\treturn (str);\r\n};\r\n\r\n/*\r\n * For purely historical reasons, WError's cause() function allows you to set\r\n * the cause.\r\n */\r\nWError.prototype.cause = function we_cause(c)\r\n{\r\n\tif (mod_isError(c))\r\n\t\tthis.jse_cause = c;\r\n\r\n\treturn (this.jse_cause);\r\n};\r\n","map":{"mappings":[{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules\\verror\\lib\\verror.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}}],"sources":{"node_modules\\verror\\lib\\verror.js":"/*\r\n * verror.js: richer JavaScript errors\r\n */\r\n\r\nvar mod_assertplus = require('assert-plus');\r\nvar mod_util = require('util');\r\n\r\nvar mod_extsprintf = require('extsprintf');\r\nvar mod_isError = require('core-util-is').isError;\r\nvar sprintf = mod_extsprintf.sprintf;\r\n\r\n/*\r\n * Public interface\r\n */\r\n\r\n/* So you can 'var VError = require('verror')' */\r\nmodule.exports = VError;\r\n/* For compatibility */\r\nVError.VError = VError;\r\n/* Other exported classes */\r\nVError.SError = SError;\r\nVError.WError = WError;\r\nVError.MultiError = MultiError;\r\n\r\n/*\r\n * Common function used to parse constructor arguments for VError, WError, and\r\n * SError.  Named arguments to this function:\r\n *\r\n *     strict\t\tforce strict interpretation of sprintf arguments, even\r\n *     \t\t\tif the options in \"argv\" don't say so\r\n *\r\n *     argv\t\terror's constructor arguments, which are to be\r\n *     \t\t\tinterpreted as described in README.md.  For quick\r\n *     \t\t\treference, \"argv\" has one of the following forms:\r\n *\r\n *          [ sprintf_args... ]           (argv[0] is a string)\r\n *          [ cause, sprintf_args... ]    (argv[0] is an Error)\r\n *          [ options, sprintf_args... ]  (argv[0] is an object)\r\n *\r\n * This function normalizes these forms, producing an object with the following\r\n * properties:\r\n *\r\n *    options           equivalent to \"options\" in third form.  This will never\r\n *    \t\t\tbe a direct reference to what the caller passed in\r\n *    \t\t\t(i.e., it may be a shallow copy), so it can be freely\r\n *    \t\t\tmodified.\r\n *\r\n *    shortmessage      result of sprintf(sprintf_args), taking options.strict\r\n *    \t\t\tinto account as described in README.md.\r\n */\r\nfunction parseConstructorArguments(args)\r\n{\r\n\tvar argv, options, sprintf_args, shortmessage, k;\r\n\r\n\tmod_assertplus.object(args, 'args');\r\n\tmod_assertplus.bool(args.strict, 'args.strict');\r\n\tmod_assertplus.array(args.argv, 'args.argv');\r\n\targv = args.argv;\r\n\r\n\t/*\r\n\t * First, figure out which form of invocation we've been given.\r\n\t */\r\n\tif (argv.length === 0) {\r\n\t\toptions = {};\r\n\t\tsprintf_args = [];\r\n\t} else if (mod_isError(argv[0])) {\r\n\t\toptions = { 'cause': argv[0] };\r\n\t\tsprintf_args = argv.slice(1);\r\n\t} else if (typeof (argv[0]) === 'object') {\r\n\t\toptions = {};\r\n\t\tfor (k in argv[0]) {\r\n\t\t\toptions[k] = argv[0][k];\r\n\t\t}\r\n\t\tsprintf_args = argv.slice(1);\r\n\t} else {\r\n\t\tmod_assertplus.string(argv[0],\r\n\t\t    'first argument to VError, SError, or WError ' +\r\n\t\t    'constructor must be a string, object, or Error');\r\n\t\toptions = {};\r\n\t\tsprintf_args = argv;\r\n\t}\r\n\r\n\t/*\r\n\t * Now construct the error's message.\r\n\t *\r\n\t * extsprintf (which we invoke here with our caller's arguments in order\r\n\t * to construct this Error's message) is strict in its interpretation of\r\n\t * values to be processed by the \"%s\" specifier.  The value passed to\r\n\t * extsprintf must actually be a string or something convertible to a\r\n\t * String using .toString().  Passing other values (notably \"null\" and\r\n\t * \"undefined\") is considered a programmer error.  The assumption is\r\n\t * that if you actually want to print the string \"null\" or \"undefined\",\r\n\t * then that's easy to do that when you're calling extsprintf; on the\r\n\t * other hand, if you did NOT want that (i.e., there's actually a bug\r\n\t * where the program assumes some variable is non-null and tries to\r\n\t * print it, which might happen when constructing a packet or file in\r\n\t * some specific format), then it's better to stop immediately than\r\n\t * produce bogus output.\r\n\t *\r\n\t * However, sometimes the bug is only in the code calling VError, and a\r\n\t * programmer might prefer to have the error message contain \"null\" or\r\n\t * \"undefined\" rather than have the bug in the error path crash the\r\n\t * program (making the first bug harder to identify).  For that reason,\r\n\t * by default VError converts \"null\" or \"undefined\" arguments to their\r\n\t * string representations and passes those to extsprintf.  Programmers\r\n\t * desiring the strict behavior can use the SError class or pass the\r\n\t * \"strict\" option to the VError constructor.\r\n\t */\r\n\tmod_assertplus.object(options);\r\n\tif (!options.strict && !args.strict) {\r\n\t\tsprintf_args = sprintf_args.map(function (a) {\r\n\t\t\treturn (a === null ? 'null' :\r\n\t\t\t    a === undefined ? 'undefined' : a);\r\n\t\t});\r\n\t}\r\n\r\n\tif (sprintf_args.length === 0) {\r\n\t\tshortmessage = '';\r\n\t} else {\r\n\t\tshortmessage = sprintf.apply(null, sprintf_args);\r\n\t}\r\n\r\n\treturn ({\r\n\t    'options': options,\r\n\t    'shortmessage': shortmessage\r\n\t});\r\n}\r\n\r\n/*\r\n * See README.md for reference documentation.\r\n */\r\nfunction VError()\r\n{\r\n\tvar args, obj, parsed, cause, ctor, message, k;\r\n\r\n\targs = Array.prototype.slice.call(arguments, 0);\r\n\r\n\t/*\r\n\t * This is a regrettable pattern, but JavaScript's built-in Error class\r\n\t * is defined to work this way, so we allow the constructor to be called\r\n\t * without \"new\".\r\n\t */\r\n\tif (!(this instanceof VError)) {\r\n\t\tobj = Object.create(VError.prototype);\r\n\t\tVError.apply(obj, arguments);\r\n\t\treturn (obj);\r\n\t}\r\n\r\n\t/*\r\n\t * For convenience and backwards compatibility, we support several\r\n\t * different calling forms.  Normalize them here.\r\n\t */\r\n\tparsed = parseConstructorArguments({\r\n\t    'argv': args,\r\n\t    'strict': false\r\n\t});\r\n\r\n\t/*\r\n\t * If we've been given a name, apply it now.\r\n\t */\r\n\tif (parsed.options.name) {\r\n\t\tmod_assertplus.string(parsed.options.name,\r\n\t\t    'error\\'s \"name\" must be a string');\r\n\t\tthis.name = parsed.options.name;\r\n\t}\r\n\r\n\t/*\r\n\t * For debugging, we keep track of the original short message (attached\r\n\t * this Error particularly) separately from the complete message (which\r\n\t * includes the messages of our cause chain).\r\n\t */\r\n\tthis.jse_shortmsg = parsed.shortmessage;\r\n\tmessage = parsed.shortmessage;\r\n\r\n\t/*\r\n\t * If we've been given a cause, record a reference to it and update our\r\n\t * message appropriately.\r\n\t */\r\n\tcause = parsed.options.cause;\r\n\tif (cause) {\r\n\t\tmod_assertplus.ok(mod_isError(cause), 'cause is not an Error');\r\n\t\tthis.jse_cause = cause;\r\n\r\n\t\tif (!parsed.options.skipCauseMessage) {\r\n\t\t\tmessage += ': ' + cause.message;\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n\t * If we've been given an object with properties, shallow-copy that\r\n\t * here.  We don't want to use a deep copy in case there are non-plain\r\n\t * objects here, but we don't want to use the original object in case\r\n\t * the caller modifies it later.\r\n\t */\r\n\tthis.jse_info = {};\r\n\tif (parsed.options.info) {\r\n\t\tfor (k in parsed.options.info) {\r\n\t\t\tthis.jse_info[k] = parsed.options.info[k];\r\n\t\t}\r\n\t}\r\n\r\n\tthis.message = message;\r\n\tError.call(this, message);\r\n\r\n\tif (Error.captureStackTrace) {\r\n\t\tctor = parsed.options.constructorOpt || this.constructor;\r\n\t\tError.captureStackTrace(this, ctor);\r\n\t}\r\n\r\n\treturn (this);\r\n}\r\n\r\nmod_util.inherits(VError, Error);\r\nVError.prototype.name = 'VError';\r\n\r\nVError.prototype.toString = function ve_toString()\r\n{\r\n\tvar str = (this.hasOwnProperty('name') && this.name ||\r\n\t\tthis.constructor.name || this.constructor.prototype.name);\r\n\tif (this.message)\r\n\t\tstr += ': ' + this.message;\r\n\r\n\treturn (str);\r\n};\r\n\r\n/*\r\n * This method is provided for compatibility.  New callers should use\r\n * VError.cause() instead.  That method also uses the saner `null` return value\r\n * when there is no cause.\r\n */\r\nVError.prototype.cause = function ve_cause()\r\n{\r\n\tvar cause = VError.cause(this);\r\n\treturn (cause === null ? undefined : cause);\r\n};\r\n\r\n/*\r\n * Static methods\r\n *\r\n * These class-level methods are provided so that callers can use them on\r\n * instances of Errors that are not VErrors.  New interfaces should be provided\r\n * only using static methods to eliminate the class of programming mistake where\r\n * people fail to check whether the Error object has the corresponding methods.\r\n */\r\n\r\nVError.cause = function (err)\r\n{\r\n\tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\r\n\treturn (mod_isError(err.jse_cause) ? err.jse_cause : null);\r\n};\r\n\r\nVError.info = function (err)\r\n{\r\n\tvar rv, cause, k;\r\n\r\n\tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\r\n\tcause = VError.cause(err);\r\n\tif (cause !== null) {\r\n\t\trv = VError.info(cause);\r\n\t} else {\r\n\t\trv = {};\r\n\t}\r\n\r\n\tif (typeof (err.jse_info) == 'object' && err.jse_info !== null) {\r\n\t\tfor (k in err.jse_info) {\r\n\t\t\trv[k] = err.jse_info[k];\r\n\t\t}\r\n\t}\r\n\r\n\treturn (rv);\r\n};\r\n\r\nVError.findCauseByName = function (err, name)\r\n{\r\n\tvar cause;\r\n\r\n\tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\r\n\tmod_assertplus.string(name, 'name');\r\n\tmod_assertplus.ok(name.length > 0, 'name cannot be empty');\r\n\r\n\tfor (cause = err; cause !== null; cause = VError.cause(cause)) {\r\n\t\tmod_assertplus.ok(mod_isError(cause));\r\n\t\tif (cause.name == name) {\r\n\t\t\treturn (cause);\r\n\t\t}\r\n\t}\r\n\r\n\treturn (null);\r\n};\r\n\r\nVError.hasCauseWithName = function (err, name)\r\n{\r\n\treturn (VError.findCauseByName(err, name) !== null);\r\n};\r\n\r\nVError.fullStack = function (err)\r\n{\r\n\tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\r\n\r\n\tvar cause = VError.cause(err);\r\n\r\n\tif (cause) {\r\n\t\treturn (err.stack + '\\ncaused by: ' + VError.fullStack(cause));\r\n\t}\r\n\r\n\treturn (err.stack);\r\n};\r\n\r\nVError.errorFromList = function (errors)\r\n{\r\n\tmod_assertplus.arrayOfObject(errors, 'errors');\r\n\r\n\tif (errors.length === 0) {\r\n\t\treturn (null);\r\n\t}\r\n\r\n\terrors.forEach(function (e) {\r\n\t\tmod_assertplus.ok(mod_isError(e));\r\n\t});\r\n\r\n\tif (errors.length == 1) {\r\n\t\treturn (errors[0]);\r\n\t}\r\n\r\n\treturn (new MultiError(errors));\r\n};\r\n\r\nVError.errorForEach = function (err, func)\r\n{\r\n\tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\r\n\tmod_assertplus.func(func, 'func');\r\n\r\n\tif (err instanceof MultiError) {\r\n\t\terr.errors().forEach(function iterError(e) { func(e); });\r\n\t} else {\r\n\t\tfunc(err);\r\n\t}\r\n};\r\n\r\n\r\n/*\r\n * SError is like VError, but stricter about types.  You cannot pass \"null\" or\r\n * \"undefined\" as string arguments to the formatter.\r\n */\r\nfunction SError()\r\n{\r\n\tvar args, obj, parsed, options;\r\n\r\n\targs = Array.prototype.slice.call(arguments, 0);\r\n\tif (!(this instanceof SError)) {\r\n\t\tobj = Object.create(SError.prototype);\r\n\t\tSError.apply(obj, arguments);\r\n\t\treturn (obj);\r\n\t}\r\n\r\n\tparsed = parseConstructorArguments({\r\n\t    'argv': args,\r\n\t    'strict': true\r\n\t});\r\n\r\n\toptions = parsed.options;\r\n\tVError.call(this, options, '%s', parsed.shortmessage);\r\n\r\n\treturn (this);\r\n}\r\n\r\n/*\r\n * We don't bother setting SError.prototype.name because once constructed,\r\n * SErrors are just like VErrors.\r\n */\r\nmod_util.inherits(SError, VError);\r\n\r\n\r\n/*\r\n * Represents a collection of errors for the purpose of consumers that generally\r\n * only deal with one error.  Callers can extract the individual errors\r\n * contained in this object, but may also just treat it as a normal single\r\n * error, in which case a summary message will be printed.\r\n */\r\nfunction MultiError(errors)\r\n{\r\n\tmod_assertplus.array(errors, 'list of errors');\r\n\tmod_assertplus.ok(errors.length > 0, 'must be at least one error');\r\n\tthis.ase_errors = errors;\r\n\r\n\tVError.call(this, {\r\n\t    'cause': errors[0]\r\n\t}, 'first of %d error%s', errors.length, errors.length == 1 ? '' : 's');\r\n}\r\n\r\nmod_util.inherits(MultiError, VError);\r\nMultiError.prototype.name = 'MultiError';\r\n\r\nMultiError.prototype.errors = function me_errors()\r\n{\r\n\treturn (this.ase_errors.slice(0));\r\n};\r\n\r\n\r\n/*\r\n * See README.md for reference details.\r\n */\r\nfunction WError()\r\n{\r\n\tvar args, obj, parsed, options;\r\n\r\n\targs = Array.prototype.slice.call(arguments, 0);\r\n\tif (!(this instanceof WError)) {\r\n\t\tobj = Object.create(WError.prototype);\r\n\t\tWError.apply(obj, args);\r\n\t\treturn (obj);\r\n\t}\r\n\r\n\tparsed = parseConstructorArguments({\r\n\t    'argv': args,\r\n\t    'strict': false\r\n\t});\r\n\r\n\toptions = parsed.options;\r\n\toptions['skipCauseMessage'] = true;\r\n\tVError.call(this, options, '%s', parsed.shortmessage);\r\n\r\n\treturn (this);\r\n}\r\n\r\nmod_util.inherits(WError, VError);\r\nWError.prototype.name = 'WError';\r\n\r\nWError.prototype.toString = function we_toString()\r\n{\r\n\tvar str = (this.hasOwnProperty('name') && this.name ||\r\n\t\tthis.constructor.name || this.constructor.prototype.name);\r\n\tif (this.message)\r\n\t\tstr += ': ' + this.message;\r\n\tif (this.jse_cause && this.jse_cause.message)\r\n\t\tstr += '; caused by ' + this.jse_cause.toString();\r\n\r\n\treturn (str);\r\n};\r\n\r\n/*\r\n * For purely historical reasons, WError's cause() function allows you to set\r\n * the cause.\r\n */\r\nWError.prototype.cause = function we_cause(c)\r\n{\r\n\tif (mod_isError(c))\r\n\t\tthis.jse_cause = c;\r\n\r\n\treturn (this.jse_cause);\r\n};\r\n"},"lineCount":452}},"hash":"7b4e7173d328b952dbb7120eabfb897f","cacheData":{"env":{}}}