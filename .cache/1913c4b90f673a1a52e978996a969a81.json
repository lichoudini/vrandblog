{"dependencies":[{"name":"C:\\Users\\kea_h\\vrandblog\\package.json","includedInParent":true,"mtime":1521485357193},{"name":"C:\\Users\\kea_h\\vrandblog\\.babelrc","includedInParent":true,"mtime":1521251480440},{"name":"C:\\Users\\kea_h\\vrandblog\\node_modules\\qs\\package.json","includedInParent":true,"mtime":1521485356182},{"name":"./utils","loc":{"line":3,"column":20}}],"generated":{"js":"'use strict';\n\nvar Utils = require('./utils');\n\nvar has = Object.prototype.hasOwnProperty;\n\nvar defaults = {\n    delimiter: '&',\n    depth: 5,\n    arrayLimit: 20,\n    parameterLimit: 1000,\n    strictNullHandling: false,\n    plainObjects: false,\n    allowPrototypes: false,\n    allowDots: false,\n    decoder: Utils.decode\n};\n\nvar parseValues = function parseValues(str, options) {\n    var obj = {};\n    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);\n\n    for (var i = 0; i < parts.length; ++i) {\n        var part = parts[i];\n        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;\n\n        var key, val;\n        if (pos === -1) {\n            key = options.decoder(part);\n            val = options.strictNullHandling ? null : '';\n        } else {\n            key = options.decoder(part.slice(0, pos));\n            val = options.decoder(part.slice(pos + 1));\n        }\n        if (has.call(obj, key)) {\n            obj[key] = [].concat(obj[key]).concat(val);\n        } else {\n            obj[key] = val;\n        }\n    }\n\n    return obj;\n};\n\nvar parseObject = function parseObject(chain, val, options) {\n    if (!chain.length) {\n        return val;\n    }\n\n    var root = chain.shift();\n\n    var obj;\n    if (root === '[]') {\n        obj = [];\n        obj = obj.concat(parseObject(chain, val, options));\n    } else {\n        obj = options.plainObjects ? Object.create(null) : {};\n        var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;\n        var index = parseInt(cleanRoot, 10);\n        if (\n            !isNaN(index) &&\n            root !== cleanRoot &&\n            String(index) === cleanRoot &&\n            index >= 0 &&\n            (options.parseArrays && index <= options.arrayLimit)\n        ) {\n            obj = [];\n            obj[index] = parseObject(chain, val, options);\n        } else {\n            obj[cleanRoot] = parseObject(chain, val, options);\n        }\n    }\n\n    return obj;\n};\n\nvar parseKeys = function parseKeys(givenKey, val, options) {\n    if (!givenKey) {\n        return;\n    }\n\n    // Transform dot notation to bracket notation\n    var key = options.allowDots ? givenKey.replace(/\\.([^.[]+)/g, '[$1]') : givenKey;\n\n    // The regex chunks\n\n    var brackets = /(\\[[^[\\]]*])/;\n    var child = /(\\[[^[\\]]*])/g;\n\n    // Get the parent\n\n    var segment = brackets.exec(key);\n    var parent = segment ? key.slice(0, segment.index) : key;\n\n    // Stash the parent if it exists\n\n    var keys = [];\n    if (parent) {\n        // If we aren't using plain objects, optionally prefix keys\n        // that would overwrite object prototype properties\n        if (!options.plainObjects && has.call(Object.prototype, parent)) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n\n        keys.push(parent);\n    }\n\n    // Loop through children appending to the array until we hit depth\n\n    var i = 0;\n    while ((segment = child.exec(key)) !== null && i < options.depth) {\n        i += 1;\n        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n        keys.push(segment[1]);\n    }\n\n    // If there's a remainder, just add whatever is left\n\n    if (segment) {\n        keys.push('[' + key.slice(segment.index) + ']');\n    }\n\n    return parseObject(keys, val, options);\n};\n\nmodule.exports = function (str, opts) {\n    var options = opts || {};\n\n    if (options.decoder !== null && options.decoder !== undefined && typeof options.decoder !== 'function') {\n        throw new TypeError('Decoder has to be a function.');\n    }\n\n    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : defaults.delimiter;\n    options.depth = typeof options.depth === 'number' ? options.depth : defaults.depth;\n    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : defaults.arrayLimit;\n    options.parseArrays = options.parseArrays !== false;\n    options.decoder = typeof options.decoder === 'function' ? options.decoder : defaults.decoder;\n    options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : defaults.allowDots;\n    options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : defaults.plainObjects;\n    options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : defaults.allowPrototypes;\n    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : defaults.parameterLimit;\n    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;\n\n    if (str === '' || str === null || typeof str === 'undefined') {\n        return options.plainObjects ? Object.create(null) : {};\n    }\n\n    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;\n    var obj = options.plainObjects ? Object.create(null) : {};\n\n    // Iterate over the keys and setup the new object\n\n    var keys = Object.keys(tempObj);\n    for (var i = 0; i < keys.length; ++i) {\n        var key = keys[i];\n        var newObj = parseKeys(key, tempObj[key], options);\n        obj = Utils.merge(obj, newObj, options);\n    }\n\n    return Utils.compact(obj);\n};\n","map":{"mappings":[{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules\\qs\\lib\\parse.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}}],"sources":{"node_modules\\qs\\lib\\parse.js":"'use strict';\n\nvar Utils = require('./utils');\n\nvar has = Object.prototype.hasOwnProperty;\n\nvar defaults = {\n    delimiter: '&',\n    depth: 5,\n    arrayLimit: 20,\n    parameterLimit: 1000,\n    strictNullHandling: false,\n    plainObjects: false,\n    allowPrototypes: false,\n    allowDots: false,\n    decoder: Utils.decode\n};\n\nvar parseValues = function parseValues(str, options) {\n    var obj = {};\n    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);\n\n    for (var i = 0; i < parts.length; ++i) {\n        var part = parts[i];\n        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;\n\n        var key, val;\n        if (pos === -1) {\n            key = options.decoder(part);\n            val = options.strictNullHandling ? null : '';\n        } else {\n            key = options.decoder(part.slice(0, pos));\n            val = options.decoder(part.slice(pos + 1));\n        }\n        if (has.call(obj, key)) {\n            obj[key] = [].concat(obj[key]).concat(val);\n        } else {\n            obj[key] = val;\n        }\n    }\n\n    return obj;\n};\n\nvar parseObject = function parseObject(chain, val, options) {\n    if (!chain.length) {\n        return val;\n    }\n\n    var root = chain.shift();\n\n    var obj;\n    if (root === '[]') {\n        obj = [];\n        obj = obj.concat(parseObject(chain, val, options));\n    } else {\n        obj = options.plainObjects ? Object.create(null) : {};\n        var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;\n        var index = parseInt(cleanRoot, 10);\n        if (\n            !isNaN(index) &&\n            root !== cleanRoot &&\n            String(index) === cleanRoot &&\n            index >= 0 &&\n            (options.parseArrays && index <= options.arrayLimit)\n        ) {\n            obj = [];\n            obj[index] = parseObject(chain, val, options);\n        } else {\n            obj[cleanRoot] = parseObject(chain, val, options);\n        }\n    }\n\n    return obj;\n};\n\nvar parseKeys = function parseKeys(givenKey, val, options) {\n    if (!givenKey) {\n        return;\n    }\n\n    // Transform dot notation to bracket notation\n    var key = options.allowDots ? givenKey.replace(/\\.([^.[]+)/g, '[$1]') : givenKey;\n\n    // The regex chunks\n\n    var brackets = /(\\[[^[\\]]*])/;\n    var child = /(\\[[^[\\]]*])/g;\n\n    // Get the parent\n\n    var segment = brackets.exec(key);\n    var parent = segment ? key.slice(0, segment.index) : key;\n\n    // Stash the parent if it exists\n\n    var keys = [];\n    if (parent) {\n        // If we aren't using plain objects, optionally prefix keys\n        // that would overwrite object prototype properties\n        if (!options.plainObjects && has.call(Object.prototype, parent)) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n\n        keys.push(parent);\n    }\n\n    // Loop through children appending to the array until we hit depth\n\n    var i = 0;\n    while ((segment = child.exec(key)) !== null && i < options.depth) {\n        i += 1;\n        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n        keys.push(segment[1]);\n    }\n\n    // If there's a remainder, just add whatever is left\n\n    if (segment) {\n        keys.push('[' + key.slice(segment.index) + ']');\n    }\n\n    return parseObject(keys, val, options);\n};\n\nmodule.exports = function (str, opts) {\n    var options = opts || {};\n\n    if (options.decoder !== null && options.decoder !== undefined && typeof options.decoder !== 'function') {\n        throw new TypeError('Decoder has to be a function.');\n    }\n\n    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : defaults.delimiter;\n    options.depth = typeof options.depth === 'number' ? options.depth : defaults.depth;\n    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : defaults.arrayLimit;\n    options.parseArrays = options.parseArrays !== false;\n    options.decoder = typeof options.decoder === 'function' ? options.decoder : defaults.decoder;\n    options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : defaults.allowDots;\n    options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : defaults.plainObjects;\n    options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : defaults.allowPrototypes;\n    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : defaults.parameterLimit;\n    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;\n\n    if (str === '' || str === null || typeof str === 'undefined') {\n        return options.plainObjects ? Object.create(null) : {};\n    }\n\n    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;\n    var obj = options.plainObjects ? Object.create(null) : {};\n\n    // Iterate over the keys and setup the new object\n\n    var keys = Object.keys(tempObj);\n    for (var i = 0; i < keys.length; ++i) {\n        var key = keys[i];\n        var newObj = parseKeys(key, tempObj[key], options);\n        obj = Utils.merge(obj, newObj, options);\n    }\n\n    return Utils.compact(obj);\n};\n"},"lineCount":168}},"hash":"4c275dcd2bd52276e434f024b9a38856","cacheData":{"env":{}}}