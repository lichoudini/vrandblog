{"dependencies":[{"name":"C:\\Users\\kea_h\\vrandblog\\package.json","includedInParent":true,"mtime":1521485357193},{"name":"C:\\Users\\kea_h\\vrandblog\\.babelrc","includedInParent":true,"mtime":1521251480440},{"name":"C:\\Users\\kea_h\\vrandblog\\node_modules\\http-signature\\package.json","includedInParent":true,"mtime":1521485356143},{"name":"assert-plus","loc":{"line":3,"column":21}},{"name":"crypto","loc":{"line":4,"column":21}},{"name":"http","loc":{"line":5,"column":19}},{"name":"util","loc":{"line":11,"column":22}},{"name":"sshpk","loc":{"line":7,"column":20}},{"name":"jsprim","loc":{"line":8,"column":21}},{"name":"./utils","loc":{"line":9,"column":20}},{"name":"buffer"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar http = require('http');\nvar util = require('util');\nvar sshpk = require('sshpk');\nvar jsprim = require('jsprim');\nvar utils = require('./utils');\n\nvar sprintf = require('util').format;\n\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm;\n\n///--- Globals\n\nvar AUTHZ_FMT =\n  'Signature keyId=\"%s\",algorithm=\"%s\",headers=\"%s\",signature=\"%s\"';\n\n///--- Specific Errors\n\nfunction MissingHeaderError(message) {\n  HttpSignatureError.call(this, message, MissingHeaderError);\n}\nutil.inherits(MissingHeaderError, HttpSignatureError);\n\nfunction StrictParsingError(message) {\n  HttpSignatureError.call(this, message, StrictParsingError);\n}\nutil.inherits(StrictParsingError, HttpSignatureError);\n\n/* See createSigner() */\nfunction RequestSigner(options) {\n  assert.object(options, 'options');\n\n  var alg = [];\n  if (options.algorithm !== undefined) {\n    assert.string(options.algorithm, 'options.algorithm');\n    alg = validateAlgorithm(options.algorithm);\n  }\n  this.rs_alg = alg;\n\n  /*\n   * RequestSigners come in two varieties: ones with an rs_signFunc, and ones\n   * with an rs_signer.\n   *\n   * rs_signFunc-based RequestSigners have to build up their entire signing\n   * string within the rs_lines array and give it to rs_signFunc as a single\n   * concat'd blob. rs_signer-based RequestSigners can add a line at a time to\n   * their signing state by using rs_signer.update(), thus only needing to\n   * buffer the hash function state and one line at a time.\n   */\n  if (options.sign !== undefined) {\n    assert.func(options.sign, 'options.sign');\n    this.rs_signFunc = options.sign;\n\n  } else if (alg[0] === 'hmac' && options.key !== undefined) {\n    assert.string(options.keyId, 'options.keyId');\n    this.rs_keyId = options.keyId;\n\n    if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))\n      throw (new TypeError('options.key for HMAC must be a string or Buffer'));\n\n    /*\n     * Make an rs_signer for HMACs, not a rs_signFunc -- HMACs digest their\n     * data in chunks rather than requiring it all to be given in one go\n     * at the end, so they are more similar to signers than signFuncs.\n     */\n    this.rs_signer = crypto.createHmac(alg[1].toUpperCase(), options.key);\n    this.rs_signer.sign = function () {\n      var digest = this.digest('base64');\n      return ({\n        hashAlgorithm: alg[1],\n        toString: function () { return (digest); }\n      });\n    };\n\n  } else if (options.key !== undefined) {\n    var key = options.key;\n    if (typeof (key) === 'string' || Buffer.isBuffer(key))\n      key = sshpk.parsePrivateKey(key);\n\n    assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\n      'options.key must be a sshpk.PrivateKey');\n    this.rs_key = key;\n\n    assert.string(options.keyId, 'options.keyId');\n    this.rs_keyId = options.keyId;\n\n    if (!PK_ALGOS[key.type]) {\n      throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\n        'keys are not supported'));\n    }\n\n    if (alg[0] !== undefined && key.type !== alg[0]) {\n      throw (new InvalidAlgorithmError('options.key must be a ' +\n        alg[0].toUpperCase() + ' key, was given a ' +\n        key.type.toUpperCase() + ' key instead'));\n    }\n\n    this.rs_signer = key.createSign(alg[1]);\n\n  } else {\n    throw (new TypeError('options.sign (func) or options.key is required'));\n  }\n\n  this.rs_headers = [];\n  this.rs_lines = [];\n}\n\n/**\n * Adds a header to be signed, with its value, into this signer.\n *\n * @param {String} header\n * @param {String} value\n * @return {String} value written\n */\nRequestSigner.prototype.writeHeader = function (header, value) {\n  assert.string(header, 'header');\n  header = header.toLowerCase();\n  assert.string(value, 'value');\n\n  this.rs_headers.push(header);\n\n  if (this.rs_signFunc) {\n    this.rs_lines.push(header + ': ' + value);\n\n  } else {\n    var line = header + ': ' + value;\n    if (this.rs_headers.length > 0)\n      line = '\\n' + line;\n    this.rs_signer.update(line);\n  }\n\n  return (value);\n};\n\n/**\n * Adds a default Date header, returning its value.\n *\n * @return {String}\n */\nRequestSigner.prototype.writeDateHeader = function () {\n  return (this.writeHeader('date', jsprim.rfc1123(new Date())));\n};\n\n/**\n * Adds the request target line to be signed.\n *\n * @param {String} method, HTTP method (e.g. 'get', 'post', 'put')\n * @param {String} path\n */\nRequestSigner.prototype.writeTarget = function (method, path) {\n  assert.string(method, 'method');\n  assert.string(path, 'path');\n  method = method.toLowerCase();\n  this.writeHeader('(request-target)', method + ' ' + path);\n};\n\n/**\n * Calculate the value for the Authorization header on this request\n * asynchronously.\n *\n * @param {Func} callback (err, authz)\n */\nRequestSigner.prototype.sign = function (cb) {\n  assert.func(cb, 'callback');\n\n  if (this.rs_headers.length < 1)\n    throw (new Error('At least one header must be signed'));\n\n  var alg, authz;\n  if (this.rs_signFunc) {\n    var data = this.rs_lines.join('\\n');\n    var self = this;\n    this.rs_signFunc(data, function (err, sig) {\n      if (err) {\n        cb(err);\n        return;\n      }\n      try {\n        assert.object(sig, 'signature');\n        assert.string(sig.keyId, 'signature.keyId');\n        assert.string(sig.algorithm, 'signature.algorithm');\n        assert.string(sig.signature, 'signature.signature');\n        alg = validateAlgorithm(sig.algorithm);\n\n        authz = sprintf(AUTHZ_FMT,\n          sig.keyId,\n          sig.algorithm,\n          self.rs_headers.join(' '),\n          sig.signature);\n      } catch (e) {\n        cb(e);\n        return;\n      }\n      cb(null, authz);\n    });\n\n  } else {\n    try {\n      var sigObj = this.rs_signer.sign();\n    } catch (e) {\n      cb(e);\n      return;\n    }\n    alg = (this.rs_alg[0] || this.rs_key.type) + '-' + sigObj.hashAlgorithm;\n    var signature = sigObj.toString();\n    authz = sprintf(AUTHZ_FMT,\n      this.rs_keyId,\n      alg,\n      this.rs_headers.join(' '),\n      signature);\n    cb(null, authz);\n  }\n};\n\n///--- Exported API\n\nmodule.exports = {\n  /**\n   * Identifies whether a given object is a request signer or not.\n   *\n   * @param {Object} object, the object to identify\n   * @returns {Boolean}\n   */\n  isSigner: function (obj) {\n    if (typeof (obj) === 'object' && obj instanceof RequestSigner)\n      return (true);\n    return (false);\n  },\n\n  /**\n   * Creates a request signer, used to asynchronously build a signature\n   * for a request (does not have to be an http.ClientRequest).\n   *\n   * @param {Object} options, either:\n   *                   - {String} keyId\n   *                   - {String|Buffer} key\n   *                   - {String} algorithm (optional, required for HMAC)\n   *                 or:\n   *                   - {Func} sign (data, cb)\n   * @return {RequestSigner}\n   */\n  createSigner: function createSigner(options) {\n    return (new RequestSigner(options));\n  },\n\n  /**\n   * Adds an 'Authorization' header to an http.ClientRequest object.\n   *\n   * Note that this API will add a Date header if it's not already set. Any\n   * other headers in the options.headers array MUST be present, or this\n   * will throw.\n   *\n   * You shouldn't need to check the return type; it's just there if you want\n   * to be pedantic.\n   *\n   * The optional flag indicates whether parsing should use strict enforcement\n   * of the version draft-cavage-http-signatures-04 of the spec or beyond.\n   * The default is to be loose and support\n   * older versions for compatibility.\n   *\n   * @param {Object} request an instance of http.ClientRequest.\n   * @param {Object} options signing parameters object:\n   *                   - {String} keyId required.\n   *                   - {String} key required (either a PEM or HMAC key).\n   *                   - {Array} headers optional; defaults to ['date'].\n   *                   - {String} algorithm optional (unless key is HMAC);\n   *                              default is the same as the sshpk default\n   *                              signing algorithm for the type of key given\n   *                   - {String} httpVersion optional; defaults to '1.1'.\n   *                   - {Boolean} strict optional; defaults to 'false'.\n   * @return {Boolean} true if Authorization (and optionally Date) were added.\n   * @throws {TypeError} on bad parameter types (input).\n   * @throws {InvalidAlgorithmError} if algorithm was bad or incompatible with\n   *                                 the given key.\n   * @throws {sshpk.KeyParseError} if key was bad.\n   * @throws {MissingHeaderError} if a header to be signed was specified but\n   *                              was not present.\n   */\n  signRequest: function signRequest(request, options) {\n    assert.object(request, 'request');\n    assert.object(options, 'options');\n    assert.optionalString(options.algorithm, 'options.algorithm');\n    assert.string(options.keyId, 'options.keyId');\n    assert.optionalArrayOfString(options.headers, 'options.headers');\n    assert.optionalString(options.httpVersion, 'options.httpVersion');\n\n    if (!request.getHeader('Date'))\n      request.setHeader('Date', jsprim.rfc1123(new Date()));\n    if (!options.headers)\n      options.headers = ['date'];\n    if (!options.httpVersion)\n      options.httpVersion = '1.1';\n\n    var alg = [];\n    if (options.algorithm) {\n      options.algorithm = options.algorithm.toLowerCase();\n      alg = validateAlgorithm(options.algorithm);\n    }\n\n    var i;\n    var stringToSign = '';\n    for (i = 0; i < options.headers.length; i++) {\n      if (typeof (options.headers[i]) !== 'string')\n        throw new TypeError('options.headers must be an array of Strings');\n\n      var h = options.headers[i].toLowerCase();\n\n      if (h === 'request-line') {\n        if (!options.strict) {\n          /**\n           * We allow headers from the older spec drafts if strict parsing isn't\n           * specified in options.\n           */\n          stringToSign +=\n            request.method + ' ' + request.path + ' HTTP/' +\n            options.httpVersion;\n        } else {\n          /* Strict parsing doesn't allow older draft headers. */\n          throw (new StrictParsingError('request-line is not a valid header ' +\n            'with strict parsing enabled.'));\n        }\n      } else if (h === '(request-target)') {\n        stringToSign +=\n          '(request-target): ' + request.method.toLowerCase() + ' ' +\n          request.path;\n      } else {\n        var value = request.getHeader(h);\n        if (value === undefined || value === '') {\n          throw new MissingHeaderError(h + ' was not in the request');\n        }\n        stringToSign += h + ': ' + value;\n      }\n\n      if ((i + 1) < options.headers.length)\n        stringToSign += '\\n';\n    }\n\n    /* This is just for unit tests. */\n    if (request.hasOwnProperty('_stringToSign')) {\n      request._stringToSign = stringToSign;\n    }\n\n    var signature;\n    if (alg[0] === 'hmac') {\n      if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))\n        throw (new TypeError('options.key must be a string or Buffer'));\n\n      var hmac = crypto.createHmac(alg[1].toUpperCase(), options.key);\n      hmac.update(stringToSign);\n      signature = hmac.digest('base64');\n\n    } else {\n      var key = options.key;\n      if (typeof (key) === 'string' || Buffer.isBuffer(key))\n        key = sshpk.parsePrivateKey(options.key);\n\n      assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\n        'options.key must be a sshpk.PrivateKey');\n\n      if (!PK_ALGOS[key.type]) {\n        throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\n          'keys are not supported'));\n      }\n\n      if (alg[0] !== undefined && key.type !== alg[0]) {\n        throw (new InvalidAlgorithmError('options.key must be a ' +\n          alg[0].toUpperCase() + ' key, was given a ' +\n          key.type.toUpperCase() + ' key instead'));\n      }\n\n      var signer = key.createSign(alg[1]);\n      signer.update(stringToSign);\n      var sigObj = signer.sign();\n      if (!HASH_ALGOS[sigObj.hashAlgorithm]) {\n        throw (new InvalidAlgorithmError(sigObj.hashAlgorithm.toUpperCase() +\n          ' is not a supported hash algorithm'));\n      }\n      options.algorithm = key.type + '-' + sigObj.hashAlgorithm;\n      signature = sigObj.toString();\n      assert.notStrictEqual(signature, '', 'empty signature produced');\n    }\n\n    request.setHeader('Authorization', sprintf(AUTHZ_FMT,\n                                               options.keyId,\n                                               options.algorithm,\n                                               options.headers.join(' '),\n                                               signature));\n\n    return true;\n  }\n\n};\n","map":{"mappings":[{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":254,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":255,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":256,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":257,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":258,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":259,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":260,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":261,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":262,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":263,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":264,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":265,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":266,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":267,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":268,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":269,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":270,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":271,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":272,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":273,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":274,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":275,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":276,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":277,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":278,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":279,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":280,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":281,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":282,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":283,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":284,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":285,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":286,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":287,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":288,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":289,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":290,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":291,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":292,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":293,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":294,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":295,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":296,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":297,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":298,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":299,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":300,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":301,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":302,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":303,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":304,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":305,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":306,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":307,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":308,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":309,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":310,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":311,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":312,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":313,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":314,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":315,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":316,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":317,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":318,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":319,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":320,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":321,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":322,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":323,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":324,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":325,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":326,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":327,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":328,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":329,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":330,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":331,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":332,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":333,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":334,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":335,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":336,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":337,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":338,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":339,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":340,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":341,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":342,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":343,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":344,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":345,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":346,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":347,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":348,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":349,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":350,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":351,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":352,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":353,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":354,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":355,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":356,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":357,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":358,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":359,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":360,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":361,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":362,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":363,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":364,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":365,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":366,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":367,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":368,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":369,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":370,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":371,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":372,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":373,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":374,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":375,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":376,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":377,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":378,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":379,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":380,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":381,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":382,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":383,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":384,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":385,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":386,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":387,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":388,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":389,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":390,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":391,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":392,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":393,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":394,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":395,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":396,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":397,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":398,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":399,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules\\http-signature\\lib\\signer.js","original":{"line":400,"column":0},"generated":{"line":401,"column":0}}],"sources":{"node_modules\\http-signature\\lib\\signer.js":"// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar http = require('http');\nvar util = require('util');\nvar sshpk = require('sshpk');\nvar jsprim = require('jsprim');\nvar utils = require('./utils');\n\nvar sprintf = require('util').format;\n\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm;\n\n///--- Globals\n\nvar AUTHZ_FMT =\n  'Signature keyId=\"%s\",algorithm=\"%s\",headers=\"%s\",signature=\"%s\"';\n\n///--- Specific Errors\n\nfunction MissingHeaderError(message) {\n  HttpSignatureError.call(this, message, MissingHeaderError);\n}\nutil.inherits(MissingHeaderError, HttpSignatureError);\n\nfunction StrictParsingError(message) {\n  HttpSignatureError.call(this, message, StrictParsingError);\n}\nutil.inherits(StrictParsingError, HttpSignatureError);\n\n/* See createSigner() */\nfunction RequestSigner(options) {\n  assert.object(options, 'options');\n\n  var alg = [];\n  if (options.algorithm !== undefined) {\n    assert.string(options.algorithm, 'options.algorithm');\n    alg = validateAlgorithm(options.algorithm);\n  }\n  this.rs_alg = alg;\n\n  /*\n   * RequestSigners come in two varieties: ones with an rs_signFunc, and ones\n   * with an rs_signer.\n   *\n   * rs_signFunc-based RequestSigners have to build up their entire signing\n   * string within the rs_lines array and give it to rs_signFunc as a single\n   * concat'd blob. rs_signer-based RequestSigners can add a line at a time to\n   * their signing state by using rs_signer.update(), thus only needing to\n   * buffer the hash function state and one line at a time.\n   */\n  if (options.sign !== undefined) {\n    assert.func(options.sign, 'options.sign');\n    this.rs_signFunc = options.sign;\n\n  } else if (alg[0] === 'hmac' && options.key !== undefined) {\n    assert.string(options.keyId, 'options.keyId');\n    this.rs_keyId = options.keyId;\n\n    if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))\n      throw (new TypeError('options.key for HMAC must be a string or Buffer'));\n\n    /*\n     * Make an rs_signer for HMACs, not a rs_signFunc -- HMACs digest their\n     * data in chunks rather than requiring it all to be given in one go\n     * at the end, so they are more similar to signers than signFuncs.\n     */\n    this.rs_signer = crypto.createHmac(alg[1].toUpperCase(), options.key);\n    this.rs_signer.sign = function () {\n      var digest = this.digest('base64');\n      return ({\n        hashAlgorithm: alg[1],\n        toString: function () { return (digest); }\n      });\n    };\n\n  } else if (options.key !== undefined) {\n    var key = options.key;\n    if (typeof (key) === 'string' || Buffer.isBuffer(key))\n      key = sshpk.parsePrivateKey(key);\n\n    assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\n      'options.key must be a sshpk.PrivateKey');\n    this.rs_key = key;\n\n    assert.string(options.keyId, 'options.keyId');\n    this.rs_keyId = options.keyId;\n\n    if (!PK_ALGOS[key.type]) {\n      throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\n        'keys are not supported'));\n    }\n\n    if (alg[0] !== undefined && key.type !== alg[0]) {\n      throw (new InvalidAlgorithmError('options.key must be a ' +\n        alg[0].toUpperCase() + ' key, was given a ' +\n        key.type.toUpperCase() + ' key instead'));\n    }\n\n    this.rs_signer = key.createSign(alg[1]);\n\n  } else {\n    throw (new TypeError('options.sign (func) or options.key is required'));\n  }\n\n  this.rs_headers = [];\n  this.rs_lines = [];\n}\n\n/**\n * Adds a header to be signed, with its value, into this signer.\n *\n * @param {String} header\n * @param {String} value\n * @return {String} value written\n */\nRequestSigner.prototype.writeHeader = function (header, value) {\n  assert.string(header, 'header');\n  header = header.toLowerCase();\n  assert.string(value, 'value');\n\n  this.rs_headers.push(header);\n\n  if (this.rs_signFunc) {\n    this.rs_lines.push(header + ': ' + value);\n\n  } else {\n    var line = header + ': ' + value;\n    if (this.rs_headers.length > 0)\n      line = '\\n' + line;\n    this.rs_signer.update(line);\n  }\n\n  return (value);\n};\n\n/**\n * Adds a default Date header, returning its value.\n *\n * @return {String}\n */\nRequestSigner.prototype.writeDateHeader = function () {\n  return (this.writeHeader('date', jsprim.rfc1123(new Date())));\n};\n\n/**\n * Adds the request target line to be signed.\n *\n * @param {String} method, HTTP method (e.g. 'get', 'post', 'put')\n * @param {String} path\n */\nRequestSigner.prototype.writeTarget = function (method, path) {\n  assert.string(method, 'method');\n  assert.string(path, 'path');\n  method = method.toLowerCase();\n  this.writeHeader('(request-target)', method + ' ' + path);\n};\n\n/**\n * Calculate the value for the Authorization header on this request\n * asynchronously.\n *\n * @param {Func} callback (err, authz)\n */\nRequestSigner.prototype.sign = function (cb) {\n  assert.func(cb, 'callback');\n\n  if (this.rs_headers.length < 1)\n    throw (new Error('At least one header must be signed'));\n\n  var alg, authz;\n  if (this.rs_signFunc) {\n    var data = this.rs_lines.join('\\n');\n    var self = this;\n    this.rs_signFunc(data, function (err, sig) {\n      if (err) {\n        cb(err);\n        return;\n      }\n      try {\n        assert.object(sig, 'signature');\n        assert.string(sig.keyId, 'signature.keyId');\n        assert.string(sig.algorithm, 'signature.algorithm');\n        assert.string(sig.signature, 'signature.signature');\n        alg = validateAlgorithm(sig.algorithm);\n\n        authz = sprintf(AUTHZ_FMT,\n          sig.keyId,\n          sig.algorithm,\n          self.rs_headers.join(' '),\n          sig.signature);\n      } catch (e) {\n        cb(e);\n        return;\n      }\n      cb(null, authz);\n    });\n\n  } else {\n    try {\n      var sigObj = this.rs_signer.sign();\n    } catch (e) {\n      cb(e);\n      return;\n    }\n    alg = (this.rs_alg[0] || this.rs_key.type) + '-' + sigObj.hashAlgorithm;\n    var signature = sigObj.toString();\n    authz = sprintf(AUTHZ_FMT,\n      this.rs_keyId,\n      alg,\n      this.rs_headers.join(' '),\n      signature);\n    cb(null, authz);\n  }\n};\n\n///--- Exported API\n\nmodule.exports = {\n  /**\n   * Identifies whether a given object is a request signer or not.\n   *\n   * @param {Object} object, the object to identify\n   * @returns {Boolean}\n   */\n  isSigner: function (obj) {\n    if (typeof (obj) === 'object' && obj instanceof RequestSigner)\n      return (true);\n    return (false);\n  },\n\n  /**\n   * Creates a request signer, used to asynchronously build a signature\n   * for a request (does not have to be an http.ClientRequest).\n   *\n   * @param {Object} options, either:\n   *                   - {String} keyId\n   *                   - {String|Buffer} key\n   *                   - {String} algorithm (optional, required for HMAC)\n   *                 or:\n   *                   - {Func} sign (data, cb)\n   * @return {RequestSigner}\n   */\n  createSigner: function createSigner(options) {\n    return (new RequestSigner(options));\n  },\n\n  /**\n   * Adds an 'Authorization' header to an http.ClientRequest object.\n   *\n   * Note that this API will add a Date header if it's not already set. Any\n   * other headers in the options.headers array MUST be present, or this\n   * will throw.\n   *\n   * You shouldn't need to check the return type; it's just there if you want\n   * to be pedantic.\n   *\n   * The optional flag indicates whether parsing should use strict enforcement\n   * of the version draft-cavage-http-signatures-04 of the spec or beyond.\n   * The default is to be loose and support\n   * older versions for compatibility.\n   *\n   * @param {Object} request an instance of http.ClientRequest.\n   * @param {Object} options signing parameters object:\n   *                   - {String} keyId required.\n   *                   - {String} key required (either a PEM or HMAC key).\n   *                   - {Array} headers optional; defaults to ['date'].\n   *                   - {String} algorithm optional (unless key is HMAC);\n   *                              default is the same as the sshpk default\n   *                              signing algorithm for the type of key given\n   *                   - {String} httpVersion optional; defaults to '1.1'.\n   *                   - {Boolean} strict optional; defaults to 'false'.\n   * @return {Boolean} true if Authorization (and optionally Date) were added.\n   * @throws {TypeError} on bad parameter types (input).\n   * @throws {InvalidAlgorithmError} if algorithm was bad or incompatible with\n   *                                 the given key.\n   * @throws {sshpk.KeyParseError} if key was bad.\n   * @throws {MissingHeaderError} if a header to be signed was specified but\n   *                              was not present.\n   */\n  signRequest: function signRequest(request, options) {\n    assert.object(request, 'request');\n    assert.object(options, 'options');\n    assert.optionalString(options.algorithm, 'options.algorithm');\n    assert.string(options.keyId, 'options.keyId');\n    assert.optionalArrayOfString(options.headers, 'options.headers');\n    assert.optionalString(options.httpVersion, 'options.httpVersion');\n\n    if (!request.getHeader('Date'))\n      request.setHeader('Date', jsprim.rfc1123(new Date()));\n    if (!options.headers)\n      options.headers = ['date'];\n    if (!options.httpVersion)\n      options.httpVersion = '1.1';\n\n    var alg = [];\n    if (options.algorithm) {\n      options.algorithm = options.algorithm.toLowerCase();\n      alg = validateAlgorithm(options.algorithm);\n    }\n\n    var i;\n    var stringToSign = '';\n    for (i = 0; i < options.headers.length; i++) {\n      if (typeof (options.headers[i]) !== 'string')\n        throw new TypeError('options.headers must be an array of Strings');\n\n      var h = options.headers[i].toLowerCase();\n\n      if (h === 'request-line') {\n        if (!options.strict) {\n          /**\n           * We allow headers from the older spec drafts if strict parsing isn't\n           * specified in options.\n           */\n          stringToSign +=\n            request.method + ' ' + request.path + ' HTTP/' +\n            options.httpVersion;\n        } else {\n          /* Strict parsing doesn't allow older draft headers. */\n          throw (new StrictParsingError('request-line is not a valid header ' +\n            'with strict parsing enabled.'));\n        }\n      } else if (h === '(request-target)') {\n        stringToSign +=\n          '(request-target): ' + request.method.toLowerCase() + ' ' +\n          request.path;\n      } else {\n        var value = request.getHeader(h);\n        if (value === undefined || value === '') {\n          throw new MissingHeaderError(h + ' was not in the request');\n        }\n        stringToSign += h + ': ' + value;\n      }\n\n      if ((i + 1) < options.headers.length)\n        stringToSign += '\\n';\n    }\n\n    /* This is just for unit tests. */\n    if (request.hasOwnProperty('_stringToSign')) {\n      request._stringToSign = stringToSign;\n    }\n\n    var signature;\n    if (alg[0] === 'hmac') {\n      if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))\n        throw (new TypeError('options.key must be a string or Buffer'));\n\n      var hmac = crypto.createHmac(alg[1].toUpperCase(), options.key);\n      hmac.update(stringToSign);\n      signature = hmac.digest('base64');\n\n    } else {\n      var key = options.key;\n      if (typeof (key) === 'string' || Buffer.isBuffer(key))\n        key = sshpk.parsePrivateKey(options.key);\n\n      assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\n        'options.key must be a sshpk.PrivateKey');\n\n      if (!PK_ALGOS[key.type]) {\n        throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\n          'keys are not supported'));\n      }\n\n      if (alg[0] !== undefined && key.type !== alg[0]) {\n        throw (new InvalidAlgorithmError('options.key must be a ' +\n          alg[0].toUpperCase() + ' key, was given a ' +\n          key.type.toUpperCase() + ' key instead'));\n      }\n\n      var signer = key.createSign(alg[1]);\n      signer.update(stringToSign);\n      var sigObj = signer.sign();\n      if (!HASH_ALGOS[sigObj.hashAlgorithm]) {\n        throw (new InvalidAlgorithmError(sigObj.hashAlgorithm.toUpperCase() +\n          ' is not a supported hash algorithm'));\n      }\n      options.algorithm = key.type + '-' + sigObj.hashAlgorithm;\n      signature = sigObj.toString();\n      assert.notStrictEqual(signature, '', 'empty signature produced');\n    }\n\n    request.setHeader('Authorization', sprintf(AUTHZ_FMT,\n                                               options.keyId,\n                                               options.algorithm,\n                                               options.headers.join(' '),\n                                               signature));\n\n    return true;\n  }\n\n};\n"},"lineCount":401}},"hash":"b64f7b5074d85486baf2c37637413a23","cacheData":{"env":{}}}