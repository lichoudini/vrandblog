{"dependencies":[{"name":"C:\\Users\\kea_h\\vrandblog\\package.json","includedInParent":true,"mtime":1521988836233},{"name":"C:\\Users\\kea_h\\vrandblog\\.babelrc","includedInParent":true,"mtime":1521988825970},{"name":"C:\\Users\\kea_h\\vrandblog\\node_modules\\sshpk\\package.json","includedInParent":true,"mtime":1521988835387},{"name":"assert-plus","loc":{"line":8,"column":21}},{"name":"./rfc4253","loc":{"line":9,"column":22}},{"name":"../utils","loc":{"line":10,"column":20}},{"name":"../key","loc":{"line":11,"column":18}},{"name":"../private-key","loc":{"line":12,"column":25}},{"name":"./ssh-private","loc":{"line":14,"column":22}},{"name":"buffer"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n// Copyright 2015 Joyent, Inc.\r\n\r\nmodule.exports = {\r\n\tread: read,\r\n\twrite: write\r\n};\r\n\r\nvar assert = require('assert-plus');\r\nvar rfc4253 = require('./rfc4253');\r\nvar utils = require('../utils');\r\nvar Key = require('../key');\r\nvar PrivateKey = require('../private-key');\r\n\r\nvar sshpriv = require('./ssh-private');\r\n\r\n/*JSSTYLED*/\r\nvar SSHKEY_RE = /^([a-z0-9-]+)[ \\t]+([a-zA-Z0-9+\\/]+[=]*)([ \\t]+([^ \\t][^\\n]*[\\n]*)?)?$/;\r\n/*JSSTYLED*/\r\nvar SSHKEY_RE2 = /^([a-z0-9-]+)[ \\t\\n]+([a-zA-Z0-9+\\/][a-zA-Z0-9+\\/ \\t\\n=]*)([^a-zA-Z0-9+\\/ \\t\\n=].*)?$/;\r\n\r\nfunction read(buf, options) {\r\n\tif (typeof (buf) !== 'string') {\r\n\t\tassert.buffer(buf, 'buf');\r\n\t\tbuf = buf.toString('ascii');\r\n\t}\r\n\r\n\tvar trimmed = buf.trim().replace(/[\\\\\\r]/g, '');\r\n\tvar m = trimmed.match(SSHKEY_RE);\r\n\tif (!m)\r\n\t\tm = trimmed.match(SSHKEY_RE2);\r\n\tassert.ok(m, 'key must match regex');\r\n\r\n\tvar type = rfc4253.algToKeyType(m[1]);\r\n\tvar kbuf = new Buffer(m[2], 'base64');\r\n\r\n\t/*\r\n\t * This is a bit tricky. If we managed to parse the key and locate the\r\n\t * key comment with the regex, then do a non-partial read and assert\r\n\t * that we have consumed all bytes. If we couldn't locate the key\r\n\t * comment, though, there may be whitespace shenanigans going on that\r\n\t * have conjoined the comment to the rest of the key. We do a partial\r\n\t * read in this case to try to make the best out of a sorry situation.\r\n\t */\r\n\tvar key;\r\n\tvar ret = {};\r\n\tif (m[4]) {\r\n\t\ttry {\r\n\t\t\tkey = rfc4253.read(kbuf);\r\n\r\n\t\t} catch (e) {\r\n\t\t\tm = trimmed.match(SSHKEY_RE2);\r\n\t\t\tassert.ok(m, 'key must match regex');\r\n\t\t\tkbuf = new Buffer(m[2], 'base64');\r\n\t\t\tkey = rfc4253.readInternal(ret, 'public', kbuf);\r\n\t\t}\r\n\t} else {\r\n\t\tkey = rfc4253.readInternal(ret, 'public', kbuf);\r\n\t}\r\n\r\n\tassert.strictEqual(type, key.type);\r\n\r\n\tif (m[4] && m[4].length > 0) {\r\n\t\tkey.comment = m[4];\r\n\r\n\t} else if (ret.consumed) {\r\n\t\t/*\r\n\t\t * Now the magic: trying to recover the key comment when it's\r\n\t\t * gotten conjoined to the key or otherwise shenanigan'd.\r\n\t\t *\r\n\t\t * Work out how much base64 we used, then drop all non-base64\r\n\t\t * chars from the beginning up to this point in the the string.\r\n\t\t * Then offset in this and try to make up for missing = chars.\r\n\t\t */\r\n\t\tvar data = m[2] + (m[3] ? m[3] : '');\r\n\t\tvar realOffset = Math.ceil(ret.consumed / 3) * 4;\r\n\t\tdata = data.slice(0, realOffset - 2). /*JSSTYLED*/\r\n\t\t    replace(/[^a-zA-Z0-9+\\/=]/g, '') +\r\n\t\t    data.slice(realOffset - 2);\r\n\r\n\t\tvar padding = ret.consumed % 3;\r\n\t\tif (padding > 0 &&\r\n\t\t    data.slice(realOffset - 1, realOffset) !== '=')\r\n\t\t\trealOffset--;\r\n\t\twhile (data.slice(realOffset, realOffset + 1) === '=')\r\n\t\t\trealOffset++;\r\n\r\n\t\t/* Finally, grab what we think is the comment & clean it up. */\r\n\t\tvar trailer = data.slice(realOffset);\r\n\t\ttrailer = trailer.replace(/[\\r\\n]/g, ' ').\r\n\t\t    replace(/^\\s+/, '');\r\n\t\tif (trailer.match(/^[a-zA-Z0-9]/))\r\n\t\t\tkey.comment = trailer;\r\n\t}\r\n\r\n\treturn (key);\r\n}\r\n\r\nfunction write(key, options) {\r\n\tassert.object(key);\r\n\tif (!Key.isKey(key))\r\n\t\tthrow (new Error('Must be a public key'));\r\n\r\n\tvar parts = [];\r\n\tvar alg = rfc4253.keyTypeToAlg(key);\r\n\tparts.push(alg);\r\n\r\n\tvar buf = rfc4253.write(key);\r\n\tparts.push(buf.toString('base64'));\r\n\r\n\tif (key.comment)\r\n\t\tparts.push(key.comment);\r\n\r\n\treturn (new Buffer(parts.join(' ')));\r\n}\r\n","map":{"mappings":[{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\ssh.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}}],"sources":{"node_modules\\sshpk\\lib\\formats\\ssh.js":"// Copyright 2015 Joyent, Inc.\r\n\r\nmodule.exports = {\r\n\tread: read,\r\n\twrite: write\r\n};\r\n\r\nvar assert = require('assert-plus');\r\nvar rfc4253 = require('./rfc4253');\r\nvar utils = require('../utils');\r\nvar Key = require('../key');\r\nvar PrivateKey = require('../private-key');\r\n\r\nvar sshpriv = require('./ssh-private');\r\n\r\n/*JSSTYLED*/\r\nvar SSHKEY_RE = /^([a-z0-9-]+)[ \\t]+([a-zA-Z0-9+\\/]+[=]*)([ \\t]+([^ \\t][^\\n]*[\\n]*)?)?$/;\r\n/*JSSTYLED*/\r\nvar SSHKEY_RE2 = /^([a-z0-9-]+)[ \\t\\n]+([a-zA-Z0-9+\\/][a-zA-Z0-9+\\/ \\t\\n=]*)([^a-zA-Z0-9+\\/ \\t\\n=].*)?$/;\r\n\r\nfunction read(buf, options) {\r\n\tif (typeof (buf) !== 'string') {\r\n\t\tassert.buffer(buf, 'buf');\r\n\t\tbuf = buf.toString('ascii');\r\n\t}\r\n\r\n\tvar trimmed = buf.trim().replace(/[\\\\\\r]/g, '');\r\n\tvar m = trimmed.match(SSHKEY_RE);\r\n\tif (!m)\r\n\t\tm = trimmed.match(SSHKEY_RE2);\r\n\tassert.ok(m, 'key must match regex');\r\n\r\n\tvar type = rfc4253.algToKeyType(m[1]);\r\n\tvar kbuf = new Buffer(m[2], 'base64');\r\n\r\n\t/*\r\n\t * This is a bit tricky. If we managed to parse the key and locate the\r\n\t * key comment with the regex, then do a non-partial read and assert\r\n\t * that we have consumed all bytes. If we couldn't locate the key\r\n\t * comment, though, there may be whitespace shenanigans going on that\r\n\t * have conjoined the comment to the rest of the key. We do a partial\r\n\t * read in this case to try to make the best out of a sorry situation.\r\n\t */\r\n\tvar key;\r\n\tvar ret = {};\r\n\tif (m[4]) {\r\n\t\ttry {\r\n\t\t\tkey = rfc4253.read(kbuf);\r\n\r\n\t\t} catch (e) {\r\n\t\t\tm = trimmed.match(SSHKEY_RE2);\r\n\t\t\tassert.ok(m, 'key must match regex');\r\n\t\t\tkbuf = new Buffer(m[2], 'base64');\r\n\t\t\tkey = rfc4253.readInternal(ret, 'public', kbuf);\r\n\t\t}\r\n\t} else {\r\n\t\tkey = rfc4253.readInternal(ret, 'public', kbuf);\r\n\t}\r\n\r\n\tassert.strictEqual(type, key.type);\r\n\r\n\tif (m[4] && m[4].length > 0) {\r\n\t\tkey.comment = m[4];\r\n\r\n\t} else if (ret.consumed) {\r\n\t\t/*\r\n\t\t * Now the magic: trying to recover the key comment when it's\r\n\t\t * gotten conjoined to the key or otherwise shenanigan'd.\r\n\t\t *\r\n\t\t * Work out how much base64 we used, then drop all non-base64\r\n\t\t * chars from the beginning up to this point in the the string.\r\n\t\t * Then offset in this and try to make up for missing = chars.\r\n\t\t */\r\n\t\tvar data = m[2] + (m[3] ? m[3] : '');\r\n\t\tvar realOffset = Math.ceil(ret.consumed / 3) * 4;\r\n\t\tdata = data.slice(0, realOffset - 2). /*JSSTYLED*/\r\n\t\t    replace(/[^a-zA-Z0-9+\\/=]/g, '') +\r\n\t\t    data.slice(realOffset - 2);\r\n\r\n\t\tvar padding = ret.consumed % 3;\r\n\t\tif (padding > 0 &&\r\n\t\t    data.slice(realOffset - 1, realOffset) !== '=')\r\n\t\t\trealOffset--;\r\n\t\twhile (data.slice(realOffset, realOffset + 1) === '=')\r\n\t\t\trealOffset++;\r\n\r\n\t\t/* Finally, grab what we think is the comment & clean it up. */\r\n\t\tvar trailer = data.slice(realOffset);\r\n\t\ttrailer = trailer.replace(/[\\r\\n]/g, ' ').\r\n\t\t    replace(/^\\s+/, '');\r\n\t\tif (trailer.match(/^[a-zA-Z0-9]/))\r\n\t\t\tkey.comment = trailer;\r\n\t}\r\n\r\n\treturn (key);\r\n}\r\n\r\nfunction write(key, options) {\r\n\tassert.object(key);\r\n\tif (!Key.isKey(key))\r\n\t\tthrow (new Error('Must be a public key'));\r\n\r\n\tvar parts = [];\r\n\tvar alg = rfc4253.keyTypeToAlg(key);\r\n\tparts.push(alg);\r\n\r\n\tvar buf = rfc4253.write(key);\r\n\tparts.push(buf.toString('base64'));\r\n\r\n\tif (key.comment)\r\n\t\tparts.push(key.comment);\r\n\r\n\treturn (new Buffer(parts.join(' ')));\r\n}\r\n"},"lineCount":116}},"hash":"a9c7be748586f6df3d655acd96500de6","cacheData":{"env":{}}}