{"dependencies":[{"name":"C:\\Users\\kea_h\\vrandblog\\package.json","includedInParent":true,"mtime":1521988836233},{"name":"C:\\Users\\kea_h\\vrandblog\\.babelrc","includedInParent":true,"mtime":1521988825970},{"name":"C:\\Users\\kea_h\\vrandblog\\node_modules\\parse-asn1\\package.json","includedInParent":true,"mtime":1521988832919},{"name":"evp_bytestokey","loc":{"line":5,"column":18}},{"name":"browserify-aes","loc":{"line":6,"column":22}},{"name":"buffer"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n// adapted from https://github.com/apatil/pemstrip\r\nvar findProc = /Proc-Type: 4,ENCRYPTED\\n\\r?DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\\n\\r?\\n\\r?([0-9A-z\\n\\r\\+\\/\\=]+)\\n\\r?/m\r\nvar startRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----\\n/m\r\nvar fullRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----\\n\\r?([0-9A-z\\n\\r\\+\\/\\=]+)\\n\\r?-----END \\1-----$/m\r\nvar evp = require('evp_bytestokey')\r\nvar ciphers = require('browserify-aes')\r\nmodule.exports = function (okey, password) {\r\n  var key = okey.toString()\r\n  var match = key.match(findProc)\r\n  var decrypted\r\n  if (!match) {\r\n    var match2 = key.match(fullRegex)\r\n    decrypted = new Buffer(match2[2].replace(/\\r?\\n/g, ''), 'base64')\r\n  } else {\r\n    var suite = 'aes' + match[1]\r\n    var iv = new Buffer(match[2], 'hex')\r\n    var cipherText = new Buffer(match[3].replace(/\\r?\\n/g, ''), 'base64')\r\n    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key\r\n    var out = []\r\n    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)\r\n    out.push(cipher.update(cipherText))\r\n    out.push(cipher.final())\r\n    decrypted = Buffer.concat(out)\r\n  }\r\n  var tag = key.match(startRegex)[1]\r\n  return {\r\n    tag: tag,\r\n    data: decrypted\r\n  }\r\n}\r\n","map":{"mappings":[{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules\\parse-asn1\\fixProc.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}}],"sources":{"node_modules\\parse-asn1\\fixProc.js":"// adapted from https://github.com/apatil/pemstrip\r\nvar findProc = /Proc-Type: 4,ENCRYPTED\\n\\r?DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\\n\\r?\\n\\r?([0-9A-z\\n\\r\\+\\/\\=]+)\\n\\r?/m\r\nvar startRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----\\n/m\r\nvar fullRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----\\n\\r?([0-9A-z\\n\\r\\+\\/\\=]+)\\n\\r?-----END \\1-----$/m\r\nvar evp = require('evp_bytestokey')\r\nvar ciphers = require('browserify-aes')\r\nmodule.exports = function (okey, password) {\r\n  var key = okey.toString()\r\n  var match = key.match(findProc)\r\n  var decrypted\r\n  if (!match) {\r\n    var match2 = key.match(fullRegex)\r\n    decrypted = new Buffer(match2[2].replace(/\\r?\\n/g, ''), 'base64')\r\n  } else {\r\n    var suite = 'aes' + match[1]\r\n    var iv = new Buffer(match[2], 'hex')\r\n    var cipherText = new Buffer(match[3].replace(/\\r?\\n/g, ''), 'base64')\r\n    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key\r\n    var out = []\r\n    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)\r\n    out.push(cipher.update(cipherText))\r\n    out.push(cipher.final())\r\n    decrypted = Buffer.concat(out)\r\n  }\r\n  var tag = key.match(startRegex)[1]\r\n  return {\r\n    tag: tag,\r\n    data: decrypted\r\n  }\r\n}\r\n"},"lineCount":32}},"hash":"2ac65b3ba4d4403c6a28da512a798cae","cacheData":{"env":{}}}