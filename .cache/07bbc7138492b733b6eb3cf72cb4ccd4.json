{"dependencies":[{"name":"C:\\Users\\kea_h\\vrandblog\\package.json","includedInParent":true,"mtime":1521988836233},{"name":"C:\\Users\\kea_h\\vrandblog\\.babelrc","includedInParent":true,"mtime":1521988825970},{"name":"C:\\Users\\kea_h\\vrandblog\\node_modules\\hash-base\\package.json","includedInParent":true,"mtime":1521988830827},{"name":"stream","loc":{"line":2,"column":24}},{"name":"inherits","loc":{"line":3,"column":23}},{"name":"buffer"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n'use strict'\r\nvar Transform = require('stream').Transform\r\nvar inherits = require('inherits')\r\n\r\nfunction HashBase (blockSize) {\r\n  Transform.call(this)\r\n\r\n  this._block = new Buffer(blockSize)\r\n  this._blockSize = blockSize\r\n  this._blockOffset = 0\r\n  this._length = [0, 0, 0, 0]\r\n\r\n  this._finalized = false\r\n}\r\n\r\ninherits(HashBase, Transform)\r\n\r\nHashBase.prototype._transform = function (chunk, encoding, callback) {\r\n  var error = null\r\n  try {\r\n    if (encoding !== 'buffer') chunk = new Buffer(chunk, encoding)\r\n    this.update(chunk)\r\n  } catch (err) {\r\n    error = err\r\n  }\r\n\r\n  callback(error)\r\n}\r\n\r\nHashBase.prototype._flush = function (callback) {\r\n  var error = null\r\n  try {\r\n    this.push(this._digest())\r\n  } catch (err) {\r\n    error = err\r\n  }\r\n\r\n  callback(error)\r\n}\r\n\r\nHashBase.prototype.update = function (data, encoding) {\r\n  if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')\r\n  if (this._finalized) throw new Error('Digest already called')\r\n  if (!Buffer.isBuffer(data)) data = new Buffer(data, encoding || 'binary')\r\n\r\n  // consume data\r\n  var block = this._block\r\n  var offset = 0\r\n  while (this._blockOffset + data.length - offset >= this._blockSize) {\r\n    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]\r\n    this._update()\r\n    this._blockOffset = 0\r\n  }\r\n  while (offset < data.length) block[this._blockOffset++] = data[offset++]\r\n\r\n  // update length\r\n  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {\r\n    this._length[j] += carry\r\n    carry = (this._length[j] / 0x0100000000) | 0\r\n    if (carry > 0) this._length[j] -= 0x0100000000 * carry\r\n  }\r\n\r\n  return this\r\n}\r\n\r\nHashBase.prototype._update = function (data) {\r\n  throw new Error('_update is not implemented')\r\n}\r\n\r\nHashBase.prototype.digest = function (encoding) {\r\n  if (this._finalized) throw new Error('Digest already called')\r\n  this._finalized = true\r\n\r\n  var digest = this._digest()\r\n  if (encoding !== undefined) digest = digest.toString(encoding)\r\n  return digest\r\n}\r\n\r\nHashBase.prototype._digest = function () {\r\n  throw new Error('_digest is not implemented')\r\n}\r\n\r\nmodule.exports = HashBase\r\n","map":{"mappings":[{"source":"node_modules\\hash-base\\index.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules\\hash-base\\index.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}}],"sources":{"node_modules\\hash-base\\index.js":"'use strict'\r\nvar Transform = require('stream').Transform\r\nvar inherits = require('inherits')\r\n\r\nfunction HashBase (blockSize) {\r\n  Transform.call(this)\r\n\r\n  this._block = new Buffer(blockSize)\r\n  this._blockSize = blockSize\r\n  this._blockOffset = 0\r\n  this._length = [0, 0, 0, 0]\r\n\r\n  this._finalized = false\r\n}\r\n\r\ninherits(HashBase, Transform)\r\n\r\nHashBase.prototype._transform = function (chunk, encoding, callback) {\r\n  var error = null\r\n  try {\r\n    if (encoding !== 'buffer') chunk = new Buffer(chunk, encoding)\r\n    this.update(chunk)\r\n  } catch (err) {\r\n    error = err\r\n  }\r\n\r\n  callback(error)\r\n}\r\n\r\nHashBase.prototype._flush = function (callback) {\r\n  var error = null\r\n  try {\r\n    this.push(this._digest())\r\n  } catch (err) {\r\n    error = err\r\n  }\r\n\r\n  callback(error)\r\n}\r\n\r\nHashBase.prototype.update = function (data, encoding) {\r\n  if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')\r\n  if (this._finalized) throw new Error('Digest already called')\r\n  if (!Buffer.isBuffer(data)) data = new Buffer(data, encoding || 'binary')\r\n\r\n  // consume data\r\n  var block = this._block\r\n  var offset = 0\r\n  while (this._blockOffset + data.length - offset >= this._blockSize) {\r\n    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]\r\n    this._update()\r\n    this._blockOffset = 0\r\n  }\r\n  while (offset < data.length) block[this._blockOffset++] = data[offset++]\r\n\r\n  // update length\r\n  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {\r\n    this._length[j] += carry\r\n    carry = (this._length[j] / 0x0100000000) | 0\r\n    if (carry > 0) this._length[j] -= 0x0100000000 * carry\r\n  }\r\n\r\n  return this\r\n}\r\n\r\nHashBase.prototype._update = function (data) {\r\n  throw new Error('_update is not implemented')\r\n}\r\n\r\nHashBase.prototype.digest = function (encoding) {\r\n  if (this._finalized) throw new Error('Digest already called')\r\n  this._finalized = true\r\n\r\n  var digest = this._digest()\r\n  if (encoding !== undefined) digest = digest.toString(encoding)\r\n  return digest\r\n}\r\n\r\nHashBase.prototype._digest = function () {\r\n  throw new Error('_digest is not implemented')\r\n}\r\n\r\nmodule.exports = HashBase\r\n"},"lineCount":85}},"hash":"817a52de88f6e562d5223d91495287d4","cacheData":{"env":{}}}