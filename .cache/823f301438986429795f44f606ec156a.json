{"dependencies":[{"name":"C:\\Users\\kea_h\\vrandblog\\package.json","includedInParent":true,"mtime":1521988836233},{"name":"C:\\Users\\kea_h\\vrandblog\\.babelrc","includedInParent":true,"mtime":1521988825970},{"name":"C:\\Users\\kea_h\\vrandblog\\node_modules\\create-hash\\package.json","includedInParent":true,"mtime":1521988830084},{"name":"buffer"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n'use strict'\r\nvar intSize = 4\r\nvar zeroBuffer = new Buffer(intSize)\r\nzeroBuffer.fill(0)\r\n\r\nvar charSize = 8\r\nvar hashSize = 16\r\n\r\nfunction toArray (buf) {\r\n  if ((buf.length % intSize) !== 0) {\r\n    var len = buf.length + (intSize - (buf.length % intSize))\r\n    buf = Buffer.concat([buf, zeroBuffer], len)\r\n  }\r\n\r\n  var arr = new Array(buf.length >>> 2)\r\n  for (var i = 0, j = 0; i < buf.length; i += intSize, j++) {\r\n    arr[j] = buf.readInt32LE(i)\r\n  }\r\n\r\n  return arr\r\n}\r\n\r\nmodule.exports = function hash (buf, fn) {\r\n  var arr = fn(toArray(buf), buf.length * charSize)\r\n  buf = new Buffer(hashSize)\r\n  for (var i = 0; i < arr.length; i++) {\r\n    buf.writeInt32LE(arr[i], i << 2, true)\r\n  }\r\n  return buf\r\n}\r\n","map":{"mappings":[{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules\\create-hash\\make-hash.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}}],"sources":{"node_modules\\create-hash\\make-hash.js":"'use strict'\r\nvar intSize = 4\r\nvar zeroBuffer = new Buffer(intSize)\r\nzeroBuffer.fill(0)\r\n\r\nvar charSize = 8\r\nvar hashSize = 16\r\n\r\nfunction toArray (buf) {\r\n  if ((buf.length % intSize) !== 0) {\r\n    var len = buf.length + (intSize - (buf.length % intSize))\r\n    buf = Buffer.concat([buf, zeroBuffer], len)\r\n  }\r\n\r\n  var arr = new Array(buf.length >>> 2)\r\n  for (var i = 0, j = 0; i < buf.length; i += intSize, j++) {\r\n    arr[j] = buf.readInt32LE(i)\r\n  }\r\n\r\n  return arr\r\n}\r\n\r\nmodule.exports = function hash (buf, fn) {\r\n  var arr = fn(toArray(buf), buf.length * charSize)\r\n  buf = new Buffer(hashSize)\r\n  for (var i = 0; i < arr.length; i++) {\r\n    buf.writeInt32LE(arr[i], i << 2, true)\r\n  }\r\n  return buf\r\n}\r\n"},"lineCount":32}},"hash":"21bd6e9ec608f183ca200cdd3cae2d51","cacheData":{"env":{}}}