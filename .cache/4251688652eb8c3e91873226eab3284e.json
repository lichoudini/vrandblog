{"dependencies":[{"name":"C:\\Users\\kea_h\\vrandblog\\package.json","includedInParent":true,"mtime":1521485357193},{"name":"C:\\Users\\kea_h\\vrandblog\\.babelrc","includedInParent":true,"mtime":1521251480440},{"name":"C:\\Users\\kea_h\\vrandblog\\node_modules\\http-signature\\package.json","includedInParent":true,"mtime":1521485356143},{"name":"assert-plus","loc":{"line":3,"column":21}},{"name":"crypto","loc":{"line":4,"column":21}},{"name":"sshpk","loc":{"line":5,"column":20}},{"name":"./utils","loc":{"line":6,"column":20}},{"name":"buffer"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n// Copyright 2015 Joyent, Inc.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar sshpk = require('sshpk');\nvar utils = require('./utils');\n\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm;\n\n///--- Exported API\n\nmodule.exports = {\n  /**\n   * Verify RSA/DSA signature against public key.  You are expected to pass in\n   * an object that was returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} pubkey RSA/DSA private key PEM.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   * @throws {InvalidAlgorithmError}\n   */\n  verifySignature: function verifySignature(parsedSignature, pubkey) {\n    assert.object(parsedSignature, 'parsedSignature');\n    if (typeof (pubkey) === 'string' || Buffer.isBuffer(pubkey))\n      pubkey = sshpk.parseKey(pubkey);\n    assert.ok(sshpk.Key.isKey(pubkey, [1, 1]), 'pubkey must be a sshpk.Key');\n\n    var alg = validateAlgorithm(parsedSignature.algorithm);\n    if (alg[0] === 'hmac' || alg[0] !== pubkey.type)\n      return (false);\n\n    var v = pubkey.createVerify(alg[1]);\n    v.update(parsedSignature.signingString);\n    return (v.verify(parsedSignature.params.signature, 'base64'));\n  },\n\n  /**\n   * Verify HMAC against shared secret.  You are expected to pass in an object\n   * that was returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} secret HMAC shared secret.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   * @throws {InvalidAlgorithmError}\n   */\n  verifyHMAC: function verifyHMAC(parsedSignature, secret) {\n    assert.object(parsedSignature, 'parsedHMAC');\n    assert.string(secret, 'secret');\n\n    var alg = validateAlgorithm(parsedSignature.algorithm);\n    if (alg[0] !== 'hmac')\n      return (false);\n\n    var hashAlg = alg[1].toUpperCase();\n\n    var hmac = crypto.createHmac(hashAlg, secret);\n    hmac.update(parsedSignature.signingString);\n\n    /*\n     * Now double-hash to avoid leaking timing information - there's\n     * no easy constant-time compare in JS, so we use this approach\n     * instead. See for more info:\n     * https://www.isecpartners.com/blog/2011/february/double-hmac-\n     * verification.aspx\n     */\n    var h1 = crypto.createHmac(hashAlg, secret);\n    h1.update(hmac.digest());\n    h1 = h1.digest();\n    var h2 = crypto.createHmac(hashAlg, secret);\n    h2.update(new Buffer(parsedSignature.params.signature, 'base64'));\n    h2 = h2.digest();\n\n    /* Node 0.8 returns strings from .digest(). */\n    if (typeof (h1) === 'string')\n      return (h1 === h2);\n    /* And node 0.10 lacks the .equals() method on Buffers. */\n    if (Buffer.isBuffer(h1) && !h1.equals)\n      return (h1.toString('binary') === h2.toString('binary'));\n\n    return (h1.equals(h2));\n  }\n};\n","map":{"mappings":[{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules\\http-signature\\lib\\verify.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}}],"sources":{"node_modules\\http-signature\\lib\\verify.js":"// Copyright 2015 Joyent, Inc.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar sshpk = require('sshpk');\nvar utils = require('./utils');\n\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm;\n\n///--- Exported API\n\nmodule.exports = {\n  /**\n   * Verify RSA/DSA signature against public key.  You are expected to pass in\n   * an object that was returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} pubkey RSA/DSA private key PEM.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   * @throws {InvalidAlgorithmError}\n   */\n  verifySignature: function verifySignature(parsedSignature, pubkey) {\n    assert.object(parsedSignature, 'parsedSignature');\n    if (typeof (pubkey) === 'string' || Buffer.isBuffer(pubkey))\n      pubkey = sshpk.parseKey(pubkey);\n    assert.ok(sshpk.Key.isKey(pubkey, [1, 1]), 'pubkey must be a sshpk.Key');\n\n    var alg = validateAlgorithm(parsedSignature.algorithm);\n    if (alg[0] === 'hmac' || alg[0] !== pubkey.type)\n      return (false);\n\n    var v = pubkey.createVerify(alg[1]);\n    v.update(parsedSignature.signingString);\n    return (v.verify(parsedSignature.params.signature, 'base64'));\n  },\n\n  /**\n   * Verify HMAC against shared secret.  You are expected to pass in an object\n   * that was returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} secret HMAC shared secret.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   * @throws {InvalidAlgorithmError}\n   */\n  verifyHMAC: function verifyHMAC(parsedSignature, secret) {\n    assert.object(parsedSignature, 'parsedHMAC');\n    assert.string(secret, 'secret');\n\n    var alg = validateAlgorithm(parsedSignature.algorithm);\n    if (alg[0] !== 'hmac')\n      return (false);\n\n    var hashAlg = alg[1].toUpperCase();\n\n    var hmac = crypto.createHmac(hashAlg, secret);\n    hmac.update(parsedSignature.signingString);\n\n    /*\n     * Now double-hash to avoid leaking timing information - there's\n     * no easy constant-time compare in JS, so we use this approach\n     * instead. See for more info:\n     * https://www.isecpartners.com/blog/2011/february/double-hmac-\n     * verification.aspx\n     */\n    var h1 = crypto.createHmac(hashAlg, secret);\n    h1.update(hmac.digest());\n    h1 = h1.digest();\n    var h2 = crypto.createHmac(hashAlg, secret);\n    h2.update(new Buffer(parsedSignature.params.signature, 'base64'));\n    h2 = h2.digest();\n\n    /* Node 0.8 returns strings from .digest(). */\n    if (typeof (h1) === 'string')\n      return (h1 === h2);\n    /* And node 0.10 lacks the .equals() method on Buffers. */\n    if (Buffer.isBuffer(h1) && !h1.equals)\n      return (h1.toString('binary') === h2.toString('binary'));\n\n    return (h1.equals(h2));\n  }\n};\n"},"lineCount":90}},"hash":"5264f03597887dbacf1d06012aefe4dd","cacheData":{"env":{}}}