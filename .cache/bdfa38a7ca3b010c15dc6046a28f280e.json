{"dependencies":[{"name":"C:\\Users\\kea_h\\vrandblog\\package.json","includedInParent":true,"mtime":1521988836233},{"name":"C:\\Users\\kea_h\\vrandblog\\.babelrc","includedInParent":true,"mtime":1521988825970},{"name":"C:\\Users\\kea_h\\vrandblog\\node_modules\\mime-types\\package.json","includedInParent":true,"mtime":1521988832399},{"name":"mime-db","loc":{"line":2,"column":17}}],"generated":{"js":"\r\nvar db = require('mime-db')\r\n\r\n// types[extension] = type\r\nexports.types = Object.create(null)\r\n// extensions[type] = [extensions]\r\nexports.extensions = Object.create(null)\r\n\r\nObject.keys(db).forEach(function (name) {\r\n  var mime = db[name]\r\n  var exts = mime.extensions\r\n  if (!exts || !exts.length) return\r\n  exports.extensions[name] = exts\r\n  exts.forEach(function (ext) {\r\n    exports.types[ext] = name\r\n  })\r\n})\r\n\r\nexports.lookup = function (string) {\r\n  if (!string || typeof string !== \"string\") return false\r\n  // remove any leading paths, though we should just use path.basename\r\n  string = string.replace(/.*[\\.\\/\\\\]/, '').toLowerCase()\r\n  if (!string) return false\r\n  return exports.types[string] || false\r\n}\r\n\r\nexports.extension = function (type) {\r\n  if (!type || typeof type !== \"string\") return false\r\n  // to do: use media-typer\r\n  type = type.match(/^\\s*([^;\\s]*)(?:;|\\s|$)/)\r\n  if (!type) return false\r\n  var exts = exports.extensions[type[1].toLowerCase()]\r\n  if (!exts || !exts.length) return false\r\n  return exts[0]\r\n}\r\n\r\n// type has to be an exact mime type\r\nexports.charset = function (type) {\r\n  var mime = db[type]\r\n  if (mime && mime.charset) return mime.charset\r\n\r\n  // default text/* to utf-8\r\n  if (/^text\\//.test(type)) return 'UTF-8'\r\n\r\n  return false\r\n}\r\n\r\n// backwards compatibility\r\nexports.charsets = {\r\n  lookup: exports.charset\r\n}\r\n\r\n// to do: maybe use set-type module or something\r\nexports.contentType = function (type) {\r\n  if (!type || typeof type !== \"string\") return false\r\n  if (!~type.indexOf('/')) type = exports.lookup(type)\r\n  if (!type) return false\r\n  if (!~type.indexOf('charset')) {\r\n    var charset = exports.charset(type)\r\n    if (charset) type += '; charset=' + charset.toLowerCase()\r\n  }\r\n  return type\r\n}\r\n","map":{"mappings":[{"source":"node_modules\\mime-types\\index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules\\mime-types\\index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}}],"sources":{"node_modules\\mime-types\\index.js":"\r\nvar db = require('mime-db')\r\n\r\n// types[extension] = type\r\nexports.types = Object.create(null)\r\n// extensions[type] = [extensions]\r\nexports.extensions = Object.create(null)\r\n\r\nObject.keys(db).forEach(function (name) {\r\n  var mime = db[name]\r\n  var exts = mime.extensions\r\n  if (!exts || !exts.length) return\r\n  exports.extensions[name] = exts\r\n  exts.forEach(function (ext) {\r\n    exports.types[ext] = name\r\n  })\r\n})\r\n\r\nexports.lookup = function (string) {\r\n  if (!string || typeof string !== \"string\") return false\r\n  // remove any leading paths, though we should just use path.basename\r\n  string = string.replace(/.*[\\.\\/\\\\]/, '').toLowerCase()\r\n  if (!string) return false\r\n  return exports.types[string] || false\r\n}\r\n\r\nexports.extension = function (type) {\r\n  if (!type || typeof type !== \"string\") return false\r\n  // to do: use media-typer\r\n  type = type.match(/^\\s*([^;\\s]*)(?:;|\\s|$)/)\r\n  if (!type) return false\r\n  var exts = exports.extensions[type[1].toLowerCase()]\r\n  if (!exts || !exts.length) return false\r\n  return exts[0]\r\n}\r\n\r\n// type has to be an exact mime type\r\nexports.charset = function (type) {\r\n  var mime = db[type]\r\n  if (mime && mime.charset) return mime.charset\r\n\r\n  // default text/* to utf-8\r\n  if (/^text\\//.test(type)) return 'UTF-8'\r\n\r\n  return false\r\n}\r\n\r\n// backwards compatibility\r\nexports.charsets = {\r\n  lookup: exports.charset\r\n}\r\n\r\n// to do: maybe use set-type module or something\r\nexports.contentType = function (type) {\r\n  if (!type || typeof type !== \"string\") return false\r\n  if (!~type.indexOf('/')) type = exports.lookup(type)\r\n  if (!type) return false\r\n  if (!~type.indexOf('charset')) {\r\n    var charset = exports.charset(type)\r\n    if (charset) type += '; charset=' + charset.toLowerCase()\r\n  }\r\n  return type\r\n}\r\n"},"lineCount":64}},"hash":"e34b661aaaa9a2568e5d0aa5039c7a60","cacheData":{"env":{}}}