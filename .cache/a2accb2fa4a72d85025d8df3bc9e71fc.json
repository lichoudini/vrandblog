{"dependencies":[{"name":"C:\\Users\\kea_h\\vrandblog\\package.json","includedInParent":true,"mtime":1521988836233},{"name":"C:\\Users\\kea_h\\vrandblog\\.babelrc","includedInParent":true,"mtime":1521988825970},{"name":"C:\\Users\\kea_h\\vrandblog\\node_modules\\sshpk\\package.json","includedInParent":true,"mtime":1521988835387},{"name":"assert-plus","loc":{"line":8,"column":21}},{"name":"asn1","loc":{"line":9,"column":19}},{"name":"crypto","loc":{"line":10,"column":21}},{"name":"../algs","loc":{"line":11,"column":19}},{"name":"../utils","loc":{"line":12,"column":20}},{"name":"../key","loc":{"line":13,"column":18}},{"name":"../private-key","loc":{"line":14,"column":25}},{"name":"./pkcs1","loc":{"line":16,"column":20}},{"name":"./pkcs8","loc":{"line":17,"column":20}},{"name":"./ssh-private","loc":{"line":18,"column":22}},{"name":"./rfc4253","loc":{"line":19,"column":22}},{"name":"../errors","loc":{"line":21,"column":21}},{"name":"buffer"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n// Copyright 2015 Joyent, Inc.\r\n\r\nmodule.exports = {\r\n\tread: read,\r\n\twrite: write\r\n};\r\n\r\nvar assert = require('assert-plus');\r\nvar asn1 = require('asn1');\r\nvar crypto = require('crypto');\r\nvar algs = require('../algs');\r\nvar utils = require('../utils');\r\nvar Key = require('../key');\r\nvar PrivateKey = require('../private-key');\r\n\r\nvar pkcs1 = require('./pkcs1');\r\nvar pkcs8 = require('./pkcs8');\r\nvar sshpriv = require('./ssh-private');\r\nvar rfc4253 = require('./rfc4253');\r\n\r\nvar errors = require('../errors');\r\n\r\n/*\r\n * For reading we support both PKCS#1 and PKCS#8. If we find a private key,\r\n * we just take the public component of it and use that.\r\n */\r\nfunction read(buf, options, forceType) {\r\n\tvar input = buf;\r\n\tif (typeof (buf) !== 'string') {\r\n\t\tassert.buffer(buf, 'buf');\r\n\t\tbuf = buf.toString('ascii');\r\n\t}\r\n\r\n\tvar lines = buf.trim().split('\\n');\r\n\r\n\tvar m = lines[0].match(/*JSSTYLED*/\r\n\t    /[-]+[ ]*BEGIN ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);\r\n\tassert.ok(m, 'invalid PEM header');\r\n\r\n\tvar m2 = lines[lines.length - 1].match(/*JSSTYLED*/\r\n\t    /[-]+[ ]*END ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);\r\n\tassert.ok(m2, 'invalid PEM footer');\r\n\r\n\t/* Begin and end banners must match key type */\r\n\tassert.equal(m[2], m2[2]);\r\n\tvar type = m[2].toLowerCase();\r\n\r\n\tvar alg;\r\n\tif (m[1]) {\r\n\t\t/* They also must match algorithms, if given */\r\n\t\tassert.equal(m[1], m2[1], 'PEM header and footer mismatch');\r\n\t\talg = m[1].trim();\r\n\t}\r\n\r\n\tvar headers = {};\r\n\twhile (true) {\r\n\t\tlines = lines.slice(1);\r\n\t\tm = lines[0].match(/*JSSTYLED*/\r\n\t\t    /^([A-Za-z0-9-]+): (.+)$/);\r\n\t\tif (!m)\r\n\t\t\tbreak;\r\n\t\theaders[m[1].toLowerCase()] = m[2];\r\n\t}\r\n\r\n\tvar cipher, key, iv;\r\n\tif (headers['proc-type']) {\r\n\t\tvar parts = headers['proc-type'].split(',');\r\n\t\tif (parts[0] === '4' && parts[1] === 'ENCRYPTED') {\r\n\t\t\tif (typeof (options.passphrase) === 'string') {\r\n\t\t\t\toptions.passphrase = new Buffer(\r\n\t\t\t\t    options.passphrase, 'utf-8');\r\n\t\t\t}\r\n\t\t\tif (!Buffer.isBuffer(options.passphrase)) {\r\n\t\t\t\tthrow (new errors.KeyEncryptedError(\r\n\t\t\t\t    options.filename, 'PEM'));\r\n\t\t\t} else {\r\n\t\t\t\tparts = headers['dek-info'].split(',');\r\n\t\t\t\tassert.ok(parts.length === 2);\r\n\t\t\t\tcipher = parts[0].toLowerCase();\r\n\t\t\t\tiv = new Buffer(parts[1], 'hex');\r\n\t\t\t\tkey = utils.opensslKeyDeriv(cipher, iv,\r\n\t\t\t\t    options.passphrase, 1).key;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/* Chop off the first and last lines */\r\n\tlines = lines.slice(0, -1).join('');\r\n\tbuf = new Buffer(lines, 'base64');\r\n\r\n\tif (cipher && key && iv) {\r\n\t\tvar cipherStream = crypto.createDecipheriv(cipher, key, iv);\r\n\t\tvar chunk, chunks = [];\r\n\t\tcipherStream.once('error', function (e) {\r\n\t\t\tif (e.toString().indexOf('bad decrypt') !== -1) {\r\n\t\t\t\tthrow (new Error('Incorrect passphrase ' +\r\n\t\t\t\t    'supplied, could not decrypt key'));\r\n\t\t\t}\r\n\t\t\tthrow (e);\r\n\t\t});\r\n\t\tcipherStream.write(buf);\r\n\t\tcipherStream.end();\r\n\t\twhile ((chunk = cipherStream.read()) !== null)\r\n\t\t\tchunks.push(chunk);\r\n\t\tbuf = Buffer.concat(chunks);\r\n\t}\r\n\r\n\t/* The new OpenSSH internal format abuses PEM headers */\r\n\tif (alg && alg.toLowerCase() === 'openssh')\r\n\t\treturn (sshpriv.readSSHPrivate(type, buf, options));\r\n\tif (alg && alg.toLowerCase() === 'ssh2')\r\n\t\treturn (rfc4253.readType(type, buf, options));\r\n\r\n\tvar der = new asn1.BerReader(buf);\r\n\tder.originalInput = input;\r\n\r\n\t/*\r\n\t * All of the PEM file types start with a sequence tag, so chop it\r\n\t * off here\r\n\t */\r\n\tder.readSequence();\r\n\r\n\t/* PKCS#1 type keys name an algorithm in the banner explicitly */\r\n\tif (alg) {\r\n\t\tif (forceType)\r\n\t\t\tassert.strictEqual(forceType, 'pkcs1');\r\n\t\treturn (pkcs1.readPkcs1(alg, type, der));\r\n\t} else {\r\n\t\tif (forceType)\r\n\t\t\tassert.strictEqual(forceType, 'pkcs8');\r\n\t\treturn (pkcs8.readPkcs8(alg, type, der));\r\n\t}\r\n}\r\n\r\nfunction write(key, options, type) {\r\n\tassert.object(key);\r\n\r\n\tvar alg = {\r\n\t    'ecdsa': 'EC',\r\n\t    'rsa': 'RSA',\r\n\t    'dsa': 'DSA',\r\n\t    'ed25519': 'EdDSA'\r\n\t}[key.type];\r\n\tvar header;\r\n\r\n\tvar der = new asn1.BerWriter();\r\n\r\n\tif (PrivateKey.isPrivateKey(key)) {\r\n\t\tif (type && type === 'pkcs8') {\r\n\t\t\theader = 'PRIVATE KEY';\r\n\t\t\tpkcs8.writePkcs8(der, key);\r\n\t\t} else {\r\n\t\t\tif (type)\r\n\t\t\t\tassert.strictEqual(type, 'pkcs1');\r\n\t\t\theader = alg + ' PRIVATE KEY';\r\n\t\t\tpkcs1.writePkcs1(der, key);\r\n\t\t}\r\n\r\n\t} else if (Key.isKey(key)) {\r\n\t\tif (type && type === 'pkcs1') {\r\n\t\t\theader = alg + ' PUBLIC KEY';\r\n\t\t\tpkcs1.writePkcs1(der, key);\r\n\t\t} else {\r\n\t\t\tif (type)\r\n\t\t\t\tassert.strictEqual(type, 'pkcs8');\r\n\t\t\theader = 'PUBLIC KEY';\r\n\t\t\tpkcs8.writePkcs8(der, key);\r\n\t\t}\r\n\r\n\t} else {\r\n\t\tthrow (new Error('key is not a Key or PrivateKey'));\r\n\t}\r\n\r\n\tvar tmp = der.buffer.toString('base64');\r\n\tvar len = tmp.length + (tmp.length / 64) +\r\n\t    18 + 16 + header.length*2 + 10;\r\n\tvar buf = new Buffer(len);\r\n\tvar o = 0;\r\n\to += buf.write('-----BEGIN ' + header + '-----\\n', o);\r\n\tfor (var i = 0; i < tmp.length; ) {\r\n\t\tvar limit = i + 64;\r\n\t\tif (limit > tmp.length)\r\n\t\t\tlimit = tmp.length;\r\n\t\to += buf.write(tmp.slice(i, limit), o);\r\n\t\tbuf[o++] = 10;\r\n\t\ti = limit;\r\n\t}\r\n\to += buf.write('-----END ' + header + '-----\\n', o);\r\n\r\n\treturn (buf.slice(0, o));\r\n}\r\n","map":{"mappings":[{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules\\sshpk\\lib\\formats\\pem.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}}],"sources":{"node_modules\\sshpk\\lib\\formats\\pem.js":"// Copyright 2015 Joyent, Inc.\r\n\r\nmodule.exports = {\r\n\tread: read,\r\n\twrite: write\r\n};\r\n\r\nvar assert = require('assert-plus');\r\nvar asn1 = require('asn1');\r\nvar crypto = require('crypto');\r\nvar algs = require('../algs');\r\nvar utils = require('../utils');\r\nvar Key = require('../key');\r\nvar PrivateKey = require('../private-key');\r\n\r\nvar pkcs1 = require('./pkcs1');\r\nvar pkcs8 = require('./pkcs8');\r\nvar sshpriv = require('./ssh-private');\r\nvar rfc4253 = require('./rfc4253');\r\n\r\nvar errors = require('../errors');\r\n\r\n/*\r\n * For reading we support both PKCS#1 and PKCS#8. If we find a private key,\r\n * we just take the public component of it and use that.\r\n */\r\nfunction read(buf, options, forceType) {\r\n\tvar input = buf;\r\n\tif (typeof (buf) !== 'string') {\r\n\t\tassert.buffer(buf, 'buf');\r\n\t\tbuf = buf.toString('ascii');\r\n\t}\r\n\r\n\tvar lines = buf.trim().split('\\n');\r\n\r\n\tvar m = lines[0].match(/*JSSTYLED*/\r\n\t    /[-]+[ ]*BEGIN ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);\r\n\tassert.ok(m, 'invalid PEM header');\r\n\r\n\tvar m2 = lines[lines.length - 1].match(/*JSSTYLED*/\r\n\t    /[-]+[ ]*END ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);\r\n\tassert.ok(m2, 'invalid PEM footer');\r\n\r\n\t/* Begin and end banners must match key type */\r\n\tassert.equal(m[2], m2[2]);\r\n\tvar type = m[2].toLowerCase();\r\n\r\n\tvar alg;\r\n\tif (m[1]) {\r\n\t\t/* They also must match algorithms, if given */\r\n\t\tassert.equal(m[1], m2[1], 'PEM header and footer mismatch');\r\n\t\talg = m[1].trim();\r\n\t}\r\n\r\n\tvar headers = {};\r\n\twhile (true) {\r\n\t\tlines = lines.slice(1);\r\n\t\tm = lines[0].match(/*JSSTYLED*/\r\n\t\t    /^([A-Za-z0-9-]+): (.+)$/);\r\n\t\tif (!m)\r\n\t\t\tbreak;\r\n\t\theaders[m[1].toLowerCase()] = m[2];\r\n\t}\r\n\r\n\tvar cipher, key, iv;\r\n\tif (headers['proc-type']) {\r\n\t\tvar parts = headers['proc-type'].split(',');\r\n\t\tif (parts[0] === '4' && parts[1] === 'ENCRYPTED') {\r\n\t\t\tif (typeof (options.passphrase) === 'string') {\r\n\t\t\t\toptions.passphrase = new Buffer(\r\n\t\t\t\t    options.passphrase, 'utf-8');\r\n\t\t\t}\r\n\t\t\tif (!Buffer.isBuffer(options.passphrase)) {\r\n\t\t\t\tthrow (new errors.KeyEncryptedError(\r\n\t\t\t\t    options.filename, 'PEM'));\r\n\t\t\t} else {\r\n\t\t\t\tparts = headers['dek-info'].split(',');\r\n\t\t\t\tassert.ok(parts.length === 2);\r\n\t\t\t\tcipher = parts[0].toLowerCase();\r\n\t\t\t\tiv = new Buffer(parts[1], 'hex');\r\n\t\t\t\tkey = utils.opensslKeyDeriv(cipher, iv,\r\n\t\t\t\t    options.passphrase, 1).key;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/* Chop off the first and last lines */\r\n\tlines = lines.slice(0, -1).join('');\r\n\tbuf = new Buffer(lines, 'base64');\r\n\r\n\tif (cipher && key && iv) {\r\n\t\tvar cipherStream = crypto.createDecipheriv(cipher, key, iv);\r\n\t\tvar chunk, chunks = [];\r\n\t\tcipherStream.once('error', function (e) {\r\n\t\t\tif (e.toString().indexOf('bad decrypt') !== -1) {\r\n\t\t\t\tthrow (new Error('Incorrect passphrase ' +\r\n\t\t\t\t    'supplied, could not decrypt key'));\r\n\t\t\t}\r\n\t\t\tthrow (e);\r\n\t\t});\r\n\t\tcipherStream.write(buf);\r\n\t\tcipherStream.end();\r\n\t\twhile ((chunk = cipherStream.read()) !== null)\r\n\t\t\tchunks.push(chunk);\r\n\t\tbuf = Buffer.concat(chunks);\r\n\t}\r\n\r\n\t/* The new OpenSSH internal format abuses PEM headers */\r\n\tif (alg && alg.toLowerCase() === 'openssh')\r\n\t\treturn (sshpriv.readSSHPrivate(type, buf, options));\r\n\tif (alg && alg.toLowerCase() === 'ssh2')\r\n\t\treturn (rfc4253.readType(type, buf, options));\r\n\r\n\tvar der = new asn1.BerReader(buf);\r\n\tder.originalInput = input;\r\n\r\n\t/*\r\n\t * All of the PEM file types start with a sequence tag, so chop it\r\n\t * off here\r\n\t */\r\n\tder.readSequence();\r\n\r\n\t/* PKCS#1 type keys name an algorithm in the banner explicitly */\r\n\tif (alg) {\r\n\t\tif (forceType)\r\n\t\t\tassert.strictEqual(forceType, 'pkcs1');\r\n\t\treturn (pkcs1.readPkcs1(alg, type, der));\r\n\t} else {\r\n\t\tif (forceType)\r\n\t\t\tassert.strictEqual(forceType, 'pkcs8');\r\n\t\treturn (pkcs8.readPkcs8(alg, type, der));\r\n\t}\r\n}\r\n\r\nfunction write(key, options, type) {\r\n\tassert.object(key);\r\n\r\n\tvar alg = {\r\n\t    'ecdsa': 'EC',\r\n\t    'rsa': 'RSA',\r\n\t    'dsa': 'DSA',\r\n\t    'ed25519': 'EdDSA'\r\n\t}[key.type];\r\n\tvar header;\r\n\r\n\tvar der = new asn1.BerWriter();\r\n\r\n\tif (PrivateKey.isPrivateKey(key)) {\r\n\t\tif (type && type === 'pkcs8') {\r\n\t\t\theader = 'PRIVATE KEY';\r\n\t\t\tpkcs8.writePkcs8(der, key);\r\n\t\t} else {\r\n\t\t\tif (type)\r\n\t\t\t\tassert.strictEqual(type, 'pkcs1');\r\n\t\t\theader = alg + ' PRIVATE KEY';\r\n\t\t\tpkcs1.writePkcs1(der, key);\r\n\t\t}\r\n\r\n\t} else if (Key.isKey(key)) {\r\n\t\tif (type && type === 'pkcs1') {\r\n\t\t\theader = alg + ' PUBLIC KEY';\r\n\t\t\tpkcs1.writePkcs1(der, key);\r\n\t\t} else {\r\n\t\t\tif (type)\r\n\t\t\t\tassert.strictEqual(type, 'pkcs8');\r\n\t\t\theader = 'PUBLIC KEY';\r\n\t\t\tpkcs8.writePkcs8(der, key);\r\n\t\t}\r\n\r\n\t} else {\r\n\t\tthrow (new Error('key is not a Key or PrivateKey'));\r\n\t}\r\n\r\n\tvar tmp = der.buffer.toString('base64');\r\n\tvar len = tmp.length + (tmp.length / 64) +\r\n\t    18 + 16 + header.length*2 + 10;\r\n\tvar buf = new Buffer(len);\r\n\tvar o = 0;\r\n\to += buf.write('-----BEGIN ' + header + '-----\\n', o);\r\n\tfor (var i = 0; i < tmp.length; ) {\r\n\t\tvar limit = i + 64;\r\n\t\tif (limit > tmp.length)\r\n\t\t\tlimit = tmp.length;\r\n\t\to += buf.write(tmp.slice(i, limit), o);\r\n\t\tbuf[o++] = 10;\r\n\t\ti = limit;\r\n\t}\r\n\to += buf.write('-----END ' + header + '-----\\n', o);\r\n\r\n\treturn (buf.slice(0, o));\r\n}\r\n"},"lineCount":193}},"hash":"f361d699fd01e4c5a662541dc6ebd23f","cacheData":{"env":{}}}